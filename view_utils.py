# ##view_utils.py
import logging
from telegram import InlineKeyboardButton, InlineKeyboardMarkup
from datetime import datetime, timedelta
from telegram.ext import ContextTypes

from config import CONFIG, TIMEZONE
from handlers.common import show_main_menu
from utils import can_modify_order

logger = logging.getLogger(__name__)
    
async def refresh_day_view(query, day_offset, user_db_id, context: ContextTypes.DEFAULT_TYPE):
    """
    –û–±–Ω–æ–≤–ª—è–µ—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –º–µ–Ω—é –¥–Ω—è —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∑–∞–∫–∞–∑–µ.
    """
    try:
        db = context.bot_data['db']
        now = datetime.now(CONFIG.timezone)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º CONFIG.timezone
        
        days_ru = ["–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "–í—Ç–æ—Ä–Ω–∏–∫", "–°—Ä–µ–¥–∞", "–ß–µ—Ç–≤–µ—Ä–≥", "–ü—è—Ç–Ω–∏—Ü–∞", "–°—É–±–±–æ—Ç–∞", "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"]
        target_date = (now + timedelta(days=day_offset)).date()
        day_name = days_ru[target_date.weekday()]
        date_str = target_date.strftime("%d.%m")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—ã—Ö–æ–¥–Ω–æ–π –∏–ª–∏ –ø—Ä–∞–∑–¥–Ω–∏–∫
        if target_date.weekday() >= 5:  # –°—É–±–±–æ—Ç–∞ –∏–ª–∏ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ
            await query.edit_message_text(
                text=f"‚è≥ {day_name} ({date_str}) - –≤—ã—Ö–æ–¥–Ω–æ–π! –ú–µ–Ω—é –Ω–µ –ø—Ä–µ–¥—É—Å–º–æ—Ç—Ä–µ–Ω–æ.",
                reply_markup=None
            )
            return

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º CONFIG –≤–º–µ—Å—Ç–æ context.bot_data['config']
        holiday_name = CONFIG.holidays.get(target_date.isoformat())
        if holiday_name:
            await query.edit_message_text(
                text=f"üéâ {day_name} ({date_str}) - {holiday_name}! –ú–µ–Ω—é –Ω–µ –ø—Ä–µ–¥—É—Å–º–æ—Ç—Ä–µ–Ω–æ.",
                reply_markup=None
            )
            return

        # –ü–æ–ª—É—á–∞–µ–º –º–µ–Ω—é –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        db.cursor.execute("""
            SELECT first_course, main_course, salad 
            FROM menu 
            WHERE day = ?
        """, (day_name,))
        menu_data = db.cursor.fetchone()

        if not menu_data:
            logger.error(f"–ú–µ–Ω—é –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –¥–ª—è –¥–Ω—è {day_name}. –ü–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ –¥–Ω–µ–π –≤ –±–∞–∑–µ:")
            db.cursor.execute("SELECT day FROM menu")
            for row in db.cursor.fetchall():
                logger.error(f"–î–µ–Ω—å –≤ –±–∞–∑–µ: {row['day']}")
            await query.edit_message_text(
                text=f"‚ö†Ô∏è –ú–µ–Ω—é –Ω–∞ {day_name} ({date_str}) –Ω–µ –Ω–∞–π–¥–µ–Ω–æ",
                reply_markup=None
            )
            return

        menu = {
            'first': menu_data['first_course'],
            'main': menu_data['main_course'],
            'salad': menu_data['salad']
        }

        response_text = (
            f"üçΩ –ú–µ–Ω—é –Ω–∞ {day_name} ({date_str}):\n"
            f"1. üç≤ –ü–µ—Ä–≤–æ–µ: {menu['first']}\n"
            f"2. üçõ –û—Å–Ω–æ–≤–Ω–æ–µ –±–ª—é–¥–æ: {menu['main']}\n"
            f"3. ü•ó –°–∞–ª–∞—Ç: {menu['salad']}"
        )

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–∫–∞–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        db.cursor.execute("""
            SELECT quantity, is_preliminary 
            FROM orders 
            WHERE user_id = ? 
              AND target_date = ?
              AND is_cancelled = FALSE
        """, (user_db_id, target_date.isoformat()))
        order = db.cursor.fetchone()

        keyboard = []
        if order:
            qty, is_preliminary = order['quantity'], order['is_preliminary']
            order_type = "–ü—Ä–µ–¥–∑–∞–∫–∞–∑" if is_preliminary else "–ó–∞–∫–∞–∑"
            response_text += f"\n\n‚úÖ {order_type}: {qty} –ø–æ—Ä—Ü–∏–∏"
            
            if await can_modify_order(target_date, TIMEZONE):
                keyboard.append([InlineKeyboardButton("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å", callback_data=f"change_{day_offset}")])
                keyboard.append([InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data=f"cancel_{day_offset}")])
            else:
                response_text += "\n‚è≥ –ò–∑–º–µ–Ω–µ–Ω–∏–µ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ (–≤—Ä–µ–º—è –∏—Å—Ç–µ–∫–ª–æ)"
        elif await can_modify_order(target_date, TIMEZONE):
            keyboard.append([InlineKeyboardButton("‚úÖ –ó–∞–∫–∞–∑–∞—Ç—å", callback_data=f"order_{day_offset}")])
        else:
            response_text += "\n‚è≥ –ü—Ä–∏—ë–º –∑–∞–∫–∞–∑–æ–≤ –∑–∞–≤–µ—Ä—à—ë–Ω"

        await query.edit_message_text(
            text=response_text,
            reply_markup=InlineKeyboardMarkup(keyboard) if keyboard else None,
            parse_mode="Markdown"
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–Ω—è: {e}", exc_info=True)
        await query.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ", show_alert=True)
        
async def refresh_orders_view(query, context: ContextTypes.DEFAULT_TYPE, is_cancellation=False):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤ –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞"""
    try:
        db = context.bot_data['db']
        user = query.from_user
        now = datetime.now(context.bot_data.get('timezone'))
        days_ru = ["–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "–í—Ç–æ—Ä–Ω–∏–∫", "–°—Ä–µ–¥–∞", "–ß–µ—Ç–≤–µ—Ä–≥", "–ü—è—Ç–Ω–∏—Ü–∞", "–°—É–±–±–æ—Ç–∞", "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"]

        # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
        with db.conn:
            db.cursor.execute("SELECT id FROM users WHERE telegram_id = ?", (user.id,))
            user_record = db.cursor.fetchone()
            if not user_record:
                await query.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
                return
            user_db_id = user_record[0]

            # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–∫–∞–∑—ã
            db.cursor.execute("""
                SELECT o.target_date, o.quantity, o.is_preliminary
                FROM orders o
                WHERE o.user_id = ?
                  AND o.is_cancelled = FALSE
                  AND o.target_date >= ?
                ORDER BY o.target_date
            """, (user_db_id, now.date().isoformat()))
            active_orders = db.cursor.fetchall()

        if not active_orders:
            await query.edit_message_text("‚ÑπÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤.")
            return await show_main_menu(query.message, context)

        response = "üì¶ –í–∞—à–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–∫–∞–∑—ã:\n"
        keyboard = []

        for order in active_orders:
            target_date = datetime.strptime(order[0], "%Y-%m-%d").date()
            day_name = days_ru[target_date.weekday()]
            date_str = target_date.strftime('%d.%m')
            qty = order[1]
            status = " (–ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π)" if order[2] else ""

            response += f"üìÖ {day_name} ({date_str}) - {qty} –ø–æ—Ä—Ü–∏–π{status}\n"
            keyboard.append([
                InlineKeyboardButton(f"‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å {date_str}", 
                                   callback_data=f"change_{target_date.strftime('%Y-%m-%d')}"),
                InlineKeyboardButton(f"‚úï –û—Ç–º–µ–Ω–∏—Ç—å {date_str}", 
                                   callback_data=f"cancel_{target_date.strftime('%Y-%m-%d')}")
            ])

        keyboard.append([InlineKeyboardButton("‚úî –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_menu")])

        await query.edit_message_text(
            response,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode="Markdown"
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞: {e}", exc_info=True)
        await query.edit_message_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–∫–∞–∑–æ–≤")
        await query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)