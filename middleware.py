# ##middleware.py
from telegram import Update
from telegram.ext import BaseHandler, ContextTypes
import logging
from db import db

logger = logging.getLogger(__name__)

class AccessControlHandler(BaseHandler):
    def __init__(self):
        super().__init__(self._handle_update)
        self.priority = -1

    def check_update(self, update: object) -> bool:
        return isinstance(update, Update)

    async def _handle_update(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user = update.effective_user
        if context.user_data.get('is_verified'):
            return True  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É, –µ—Å–ª–∏ —É–∂–µ –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω –≤ —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏
        
        try:
            user = update.effective_user
            if not user:
                return False

            if user.id in context.application.bot_data.get('admin_ids', []):
                return True

            db.cursor.execute("""
                SELECT is_verified, is_deleted 
                FROM users 
                WHERE telegram_id = ?
            """, (user.id,))
            result = db.cursor.fetchone()
            
            if not result:
                logger.info(f"–ù–µ–∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id}")
                return False
                
            if not result[0] or result[1]:
                logger.info(f"–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id} (verified={result[0]}, deleted={result[1]})")
                return False
                
            return True
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–∞: {e}", exc_info=True)
            return False

    # async def _deny_access(self, update: Update):
    #     """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—Ç–∫–∞–∑–µ —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    #     try:
    #         if update.callback_query:
    #             await update.callback_query.answer(
    #                 "‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω. –ê–∫–∫–∞—É–Ω—Ç –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω", 
    #                 show_alert=True
    #             )
    #         elif update.message:
    #             await update.message.reply_text(
    #                 "‚õî –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω\n–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É"
    #             )
    #     except Exception as e:
    #         logger.error(f"Error showing access denied: {e}")

    async def _deny_access(self, update: Update):
        try:
            message = "üîß –ë–æ—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–∞ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–∏. –ü—Ä–∏–Ω–æ—Å–∏–º –∏–∑–≤–∏–Ω–µ–Ω–∏—è –∑–∞ –Ω–µ—É–¥–æ–±—Å—Ç–≤–∞!"
            if update.callback_query:
                await update.callback_query.answer(message, show_alert=True)
            elif update.message:
                await update.message.reply_text(message)
        except Exception as e:
            logger.error(f"Error showing maintenance message: {e}")

async def check_user_access(user_id: int, application=None) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –±–µ–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º"""
    try:
        if application and user_id in application.bot_data.get('admin_ids', []):
            return True
            
        db.cursor.execute("SELECT is_verified, is_deleted FROM users WHERE telegram_id = ?", (user_id,))
        result = db.cursor.fetchone()
        
        return bool(result and result[0] and not result[1])
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–∞: {e}")
        return False