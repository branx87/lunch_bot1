# ##utils.py
from telegram import Update, KeyboardButton, ReplyKeyboardMarkup
from telegram.ext import ContextTypes
import logging
from datetime import datetime, timedelta, date, time
import pytz

from config import CONFIG, MENU, TIMEZONE
from handlers.common import show_main_menu
from settings import SETTINGS_CONFIG
from db import Database

logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞ (–¥–ª—è handle_unregistered)
PHONE = 0

def is_weekday(date=None):
    if date is None:
        date = datetime.now(TIMEZONE)
    return date.weekday() < 5  # 0-4 = –ø–Ω-–ø—Ç

def get_next_workday(date=None):
    if date is None:
        date = datetime.now(TIMEZONE)
    
    days_to_add = 1
    if date.weekday() == 4:  # –ü—è—Ç–Ω–∏—Ü–∞
        days_to_add = 3  # –ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫
    elif date.weekday() == 5:  # –°—É–±–±–æ—Ç–∞
        days_to_add = 2  # –ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫
    
    return date + timedelta(days=days_to_add)

def can_modify_order(target_date):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –º–æ–∂–Ω–æ –ª–∏ –∏–∑–º–µ–Ω—è—Ç—å –∑–∞–∫–∞–∑ –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—É—é –¥–∞—Ç—É"""
    now = datetime.now(TIMEZONE)
    
    # –ï—Å–ª–∏ target_date - —Å—Ç—Ä–æ–∫–∞, –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –¥–∞—Ç—É
    if isinstance(target_date, str):
        try:
            target_date = datetime.strptime(target_date, "%Y-%m-%d").date()
        except ValueError:
            logger.error(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã: {target_date}")
            return False
    
    # –ó–∞–∫–∞–∑—ã –Ω–∞ –≤—ã—Ö–æ–¥–Ω—ã–µ –Ω–µ–≤–æ–∑–º–æ–∂–Ω—ã
    if target_date.weekday() >= 5:  # 5-6 = —Å—É–±–±–æ—Ç–∞-–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ
        return False
    
    # –ó–∞–∫–∞–∑—ã –Ω–∞ –±—É–¥—É—â–∏–µ –¥–Ω–∏ (–ø—Ä–µ–¥–∑–∞–∫–∞–∑—ã) –º–æ–∂–Ω–æ –º–µ–Ω—è—Ç—å –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è
    if target_date > now.date():
        return True
    
    # –ó–∞–∫–∞–∑—ã –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –º–æ–∂–Ω–æ –º–µ–Ω—è—Ç—å —Ç–æ–ª—å–∫–æ –¥–æ 9:30
    if target_date == now.date():
        return now.time() < time(9, 30)
    
    # –ó–∞–∫–∞–∑—ã –Ω–∞ –ø—Ä–æ—à–µ–¥—à–∏–µ –¥–Ω–∏ –Ω–µ–ª—å–∑—è –º–µ–Ω—è—Ç—å
    return False

def is_order_time_expired():
    """–°—Ç–∞—Ä–∞—è —Ñ—É–Ω–∫—Ü–∏—è, –æ—Å—Ç–∞–≤–ª—è–µ–º –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏, –Ω–æ —Ç–µ–ø–µ—Ä—å –æ–Ω–∞ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é"""
    return not can_modify_order(datetime.now(TIMEZONE).date())

def get_order_time_restriction():
    now = datetime.now(TIMEZONE)
    current_hour = now.hour
    
    if not is_weekday(now):
        next_workday = get_next_workday(now)
        return f"‚è≥ –°–µ–≥–æ–¥–Ω—è –≤—ã—Ö–æ–¥–Ω–æ–π. –í—ã –º–æ–∂–µ—Ç–µ –æ—Ñ–æ—Ä–º–∏—Ç—å –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –∑–∞–∫–∞–∑ –Ω–∞ {next_workday.strftime('%d.%m')} (–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫)"
    
    if current_hour >= 10:
        next_workday = get_next_workday(now)
        return f"‚è≥ –ü—Ä–∏–µ–º –∑–∞–∫–∞–∑–æ–≤ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω –≤ 10:00. –í—ã –º–æ–∂–µ—Ç–µ –æ—Ñ–æ—Ä–º–∏—Ç—å –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –∑–∞–∫–∞–∑ –Ω–∞ {next_workday.strftime('%d.%m')}"
    
    return None

def is_employee(full_name):
    normalized_input = ' '.join(full_name.strip().split()).lower()
    return normalized_input in CONFIG.staff_names

def get_menu_for_day(day_offset=0):
    now = datetime.now(TIMEZONE)
    days = ["–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "–í—Ç–æ—Ä–Ω–∏–∫", "–°—Ä–µ–¥–∞", "–ß–µ—Ç–≤–µ—Ä–≥", "–ü—è—Ç–Ω–∏—Ü–∞", "–°—É–±–±–æ—Ç–∞", "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"]
    target_date = (now + timedelta(days=day_offset)).date()
    day_name = days[target_date.weekday()]
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –¥–µ–Ω—å –ø—Ä–∞–∑–¥–Ω–∏–∫–æ–º
    if target_date.strftime("%Y-%m-%d") in CONFIG.get('holidays', {}):
        return None, day_name
    
    return MENU.get(day_name), day_name

def format_menu(menu, day_name, is_tomorrow=False):
    if not menu:
        return f"–ù–∞ {day_name} –≤—ã—Ö–æ–¥–Ω–æ–π! –ú–µ–Ω—é –Ω–µ –ø—Ä–µ–¥—É—Å–º–æ—Ç—Ä–µ–Ω–æ."
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É –∏ –≤—ã—á–∏—Å–ª—è–µ–º –¥–∞—Ç—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    now = datetime.now(TIMEZONE)
    days_ru = ["–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "–í—Ç–æ—Ä–Ω–∏–∫", "–°—Ä–µ–¥–∞", "–ß–µ—Ç–≤–µ—Ä–≥", "–ü—è—Ç–Ω–∏—Ü–∞", "–°—É–±–±–æ—Ç–∞", "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"]
    
    # –ù–∞—Ö–æ–¥–∏–º –∏–Ω–¥–µ–∫—Å —Ç–µ–∫—É—â–µ–≥–æ –¥–Ω—è –∏ –≤—ã—á–∏—Å–ª—è–µ–º –¥–∞—Ç—É
    current_day_index = now.weekday()
    target_day_index = days_ru.index(day_name)
    
    # –ï—Å–ª–∏ –¥–µ–Ω—å –≤ –±—É–¥—É—â–µ–º (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Å—Ä–µ–¥–∞ –ø—Ä–∏ —Ç–µ–∫—É—â–µ–º –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫–µ)
    if target_day_index > current_day_index:
        days_diff = target_day_index - current_day_index
    # –ï—Å–ª–∏ –¥–µ–Ω—å –≤ –ø—Ä–æ—à–ª–æ–º (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ –ø—Ä–∏ —Ç–µ–∫—É—â–µ–π —Å—Ä–µ–¥–µ)
    else:
        days_diff = 7 - (current_day_index - target_day_index)
    
    target_date = (now + timedelta(days=days_diff)).date()
    date_str = target_date.strftime("%d.%m")
    
    return (
        f"üçΩ –ú–µ–Ω—é –Ω–∞ {day_name} ({date_str}):\n"
        f"1. üç≤ –ü–µ—Ä–≤–æ–µ: {menu['first']}\n"
        f"2. üçõ –û—Å–Ω–æ–≤–Ω–æ–µ –±–ª—é–¥–æ: {menu['main']}\n"
        f"3. ü•ó –°–∞–ª–∞—Ç: {menu['salad']}"
    )

async def check_registration(update: Update, context: ContextTypes.DEFAULT_TYPE) -> bool:
    """
    –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –¥—Ä—É–≥–∏—Ö —á–∞—Å—Ç—è—Ö –±–æ—Ç–∞
    """
    user = update.effective_user
    
    if user.id in CONFIG.admin_ids:
        return True

    db.cursor.execute("""
        SELECT is_verified, is_employee 
        FROM users 
        WHERE telegram_id = ? AND is_deleted = FALSE
    """, (user.id,))
    
    result = db.cursor.fetchone()
    if not result:
        return False

    is_verified, is_employee = result
    return bool(is_employee and is_verified)

async def handle_unregistered(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –Ω–µ–∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.
    –¢–µ–ø–µ—Ä—å –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –í–°–ï–ú, –≤–∫–ª—é—á–∞—è –∞–¥–º–∏–Ω–æ–≤ –∏ –±—É—Ö–≥–∞–ª—Ç–µ—Ä–æ–≤.
    """
    user = update.effective_user
    user_id = user.id

    logger.info(f"–ù–µ–∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤—É–µ—Ç —Å –±–æ—Ç–æ–º")

    # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ (–¥–ª—è –≤—Å–µ—Ö –Ω–µ–∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö)
    await notify_admins_about_unregistered(context.bot, user.id, user.username, user.full_name)

    # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –í–°–ï–ú
    keyboard = [[KeyboardButton("üì± –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞", request_contact=True)]]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

    await update.message.reply_text(
        "–î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –±–æ—Ç—É –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–π—Ç–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:",
        reply_markup=reply_markup
    )
    return PHONE

def is_order_cancelled(user_id: int, target_date_str: str, context=None) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –æ—Ç–º–µ–Ω—ë–Ω –ª–∏ –∑–∞–∫–∞–∑ (–∏–∑ –ë–î –∏–ª–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞)"""
    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        db.cursor.execute("""
            SELECT is_cancelled FROM orders 
            WHERE user_id = (SELECT id FROM users WHERE telegram_id = ?)
            AND target_date = ?
        """, (user_id, target_date_str))
        
        result = db.cursor.fetchone()
        if result and result[0]:
            return True
            
        # –†–µ–∑–µ—Ä–≤–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        if context and context.user_data.get('cancelled_orders'):
            return target_date_str in context.user_data['cancelled_orders']
            
        return False
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –æ—Ç–º–µ–Ω—ã: {e}")
        return False
    
async def notify_admins_about_unregistered(bot, user_id, username, full_name):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º –æ –Ω–µ–∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ"""
    message = (
        f"‚ö†Ô∏è –ù–µ–∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—ã—Ç–∞–µ—Ç—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞:\n"
        f"üÜî ID: {user_id}\n"
        f"üë§ Username: @{username if username else '–Ω–µ—Ç'}\n"
        f"üìù –ò–º—è: {full_name}"
    )
    
    for admin_id in CONFIG.admin_ids:
        try:
            await bot.send_message(chat_id=admin_id, text=message)
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É {admin_id}: {e}")