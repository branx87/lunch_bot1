# ##main.py
# # –ü–ï–†–í–´–ï –°–¢–†–û–ö–ò –í main.py
# import tkinter_blocker  # noqa: F401
import asyncio
import logging
from pathlib import Path
from bot_core import LunchBot
from logging.handlers import RotatingFileHandler
from datetime import datetime, time
logger = logging.getLogger(__name__)

from db import CONFIG
# import matplotlib
# matplotlib.use('Agg')  # –ò—Å–ø–æ–ª—å–∑—É–µ–º non-GUI –±—ç–∫–µ–Ω–¥
# import matplotlib.pyplot as plt

import signal
import atexit
from db import db  # –∏–º–ø–æ—Ä—Ç–∏—Ä—É–π—Ç–µ –≤–∞—à —ç–∫–∑–µ–º–ø–ª—è—Ä –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö


def handle_shutdown(signum, frame):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ graceful shutdown"""
    logger.info("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã...")
    # –í—ã–∑—ã–≤–∞–µ–º –æ—á–∏—Å—Ç–∫—É –±–∞–∑—ã
    if hasattr(db, 'cleanup'):
        db.cleanup()
    exit(0)

# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤
signal.signal(signal.SIGTERM, handle_shutdown)  # –¥–ª—è docker stop
signal.signal(signal.SIGINT, handle_shutdown)   # –¥–ª—è Ctrl+C

def setup_logging():
    # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –ª–æ–≥–æ–≤, –µ—Å–ª–∏ –µ–µ –Ω–µ—Ç
    logs_dir = Path('data/logs')
    logs_dir.mkdir(parents=True, exist_ok=True)
    
    handler = RotatingFileHandler(
        logs_dir / 'bot.log',
        maxBytes=5*1024*1024,
        backupCount=3,
        encoding='utf-8'
    )
    logging.basicConfig(
        level=logging.INFO,
        format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
        handlers=[handler]
    )
    logging.getLogger("httpx").setLevel(logging.WARNING)
    logging.getLogger("telegram").setLevel(logging.WARNING)

async def main():
    setup_logging()
    logger = logging.getLogger(__name__)
    
    try:
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è BitrixSync
        bitrix_sync = None
        try:
            from bitrix import BitrixSync
            bitrix_sync = BitrixSync()
            logger.info("BitrixSync –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            asyncio.create_task(bitrix_sync.run_sync_tasks())
        except ImportError as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ BitrixSync: {e}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ BitrixSync: {e}")

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
        bot = LunchBot(bitrix_sync=bitrix_sync) if bitrix_sync else LunchBot()
        
        await bot.run()
    except Exception as e:
        logger.critical(f"‚õî –§–∞—Ç–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞: {e}", exc_info=True)
    finally:
        logger.info("‚úÖ –†–∞–±–æ—Ç–∞ –±–æ—Ç–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–≤–µ—Ä—à–µ–Ω–∞")

        # –ó–∞—Ç–µ–º –æ—á–∏—â–∞–µ–º –±–∞–∑—É –ü–û–°–õ–ï–î–ù–ï–ô
        if hasattr(db, 'cleanup'):
            db.cleanup()
        
        exit(0)

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("\nüõë –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    except Exception as e:
        logging.getLogger(__name__).critical(f"–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: {e}")
        raise