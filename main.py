# ##main.py 
# Last update: 25.06.25 - –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ DI –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É

import asyncio
import logging
from pathlib import Path
from bot_core import LunchBot
from db import Database
from config import CONFIG
from report_generators import ReportGenerator

def setup_logging():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–∏—Å—Ç–µ–º—ã –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å —Ä–æ—Ç–∞—Ü–∏–µ–π –∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º —Ä–∞–∑–º–µ—Ä–∞"""
    LOG_FILE = CONFIG.logs_dir / "bot.log"
    LOG_FILE.parent.mkdir(parents=True, exist_ok=True)
    
    # –°–æ–∑–¥–∞–µ–º rotating file handler
    file_handler = logging.handlers.RotatingFileHandler(
        filename=LOG_FILE,
        maxBytes=5*1024*1024,  # 5 MB
        backupCount=3,
        encoding='utf-8'
    )
    
    logging.basicConfig(
        level=logging.INFO,
        format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
        handlers=[
            file_handler,
            logging.StreamHandler()  # –í—ã–≤–æ–¥ –≤ –∫–æ–Ω—Å–æ–ª—å
        ]
    )
    logging.getLogger("httpx").setLevel(logging.WARNING)

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞ —Å –Ω–æ–≤–æ–π DI –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–æ–π"""
    setup_logging()
    logger = logging.getLogger(__name__)
    
    try:
        logger.info("=== –ó–ê–ü–£–°–ö –ü–†–û–ì–†–ê–ú–ú–´ ===")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        db = Database(str(CONFIG.db_path))
        CONFIG.init_db_data(db)
        report_generator = ReportGenerator(db)
        bot = LunchBot(db, report_generator)
        
        logger.info("–ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ –±–æ—Ç–∞...")
        await bot.run()
        
    except KeyboardInterrupt:
        logger.info("üõë –ö–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ Ctrl+C")
    except Exception as e:
        logger.critical(f"‚õî –û—à–∏–±–∫–∞: {e}", exc_info=True)
    finally:
        logger.info("‚úÖ –†–∞–±–æ—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("\nüõë –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    except Exception as e:
        logging.getLogger(__name__).critical(f"–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: {e}")
        raise