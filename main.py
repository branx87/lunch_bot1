# ##main.py
import asyncio
import logging
from bot_core import LunchBot
from logging.handlers import RotatingFileHandler
import matplotlib
matplotlib.use('Agg')

def setup_logging():
    handler = RotatingFileHandler(
        'bot.log',
        maxBytes=5*1024*1024,
        backupCount=3,
        encoding='utf-8'
    )
    logging.basicConfig(
        level=logging.INFO,
        format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
        handlers=[handler]
    )
    logging.getLogger("httpx").setLevel(logging.WARNING)
    logging.getLogger("telegram").setLevel(logging.WARNING)

async def main():
    """–§–∏–Ω–∞–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏"""
    setup_logging()
    logger = logging.getLogger(__name__)
    
    bot = LunchBot()
    try:
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
        await bot.run()
    except KeyboardInterrupt:
        logger.info("üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª KeyboardInterrupt")
    except asyncio.CancelledError:
        logger.info("üõë –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ –±—ã–ª–∏ –æ—Ç–º–µ–Ω–µ–Ω—ã")
    except Exception as e:
        logger.critical(f"‚õî –§–∞—Ç–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞: {str(e)}", exc_info=True)
    finally:
        logger.info("–ù–∞—á–∞–ª–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã...")
        try:
            await asyncio.wait_for(bot.stop(), timeout=5)
        except asyncio.TimeoutError:
            logger.error("‚ö†Ô∏è –ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏!")
        except Exception as e:
            logger.error(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ: {str(e)}")
        finally:
            # –§–∏–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ—Å—É—Ä—Å—ã
            await asyncio.sleep(0.1)  # –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ —Ñ–∏–Ω–∞–ª–∏–∑–∞—Ü–∏—é
            logger.info("‚úÖ –†–∞–±–æ—Ç–∞ –±–æ—Ç–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–≤–µ—Ä—à–µ–Ω–∞")

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("\nüõë –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    except Exception as e:
        logging.getLogger(__name__).critical(f"–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: {e}")
        raise