# ##report_generators.py
from openpyxl.styles import Font
from typing import Optional
import openpyxl
from datetime import datetime, date
from telegram import Update
from telegram.ext import ContextTypes
import os
import logging

from db import CONFIG
# import matplotlib
# matplotlib.use('Agg')  # –ò—Å–ø–æ–ª—å–∑—É–µ–º non-GUI –±—ç–∫–µ–Ω–¥
# import matplotlib.pyplot as plt
# try:
#     from openpyxl.styles import Font
# except RuntimeError:  # –î–ª—è –æ–∫—Ä—É–∂–µ–Ω–∏–π –±–µ–∑ GUI
#     class Font:
#         def __init__(self, bold=False):
#             self.bold = bold

from admin import ensure_reports_dir
from settings import SETTINGS_CONFIG

from db import db

logger = logging.getLogger(__name__)

async def export_orders_for_provider(
    update: Update,
    context: ContextTypes.DEFAULT_TYPE,
    start_date: Optional[date] = None,
    end_date: Optional[date] = None
):
    """
    –§–æ—Ä–º–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç—á—ë—Ç –¥–ª—è –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤.
    –û–±—ä–µ–¥–∏–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ –ª–æ–∫–∞—Ü–∏—è–º "–û—Ñ–∏—Å" –∏ "–ü–¶ 2".
    –î–æ–±–∞–≤–ª—è–µ—Ç —Å—Ç—Ä–æ–∫—É —Å –Ω–µ–∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º–∏, –µ—Å–ª–∏ —Ç–∞–∫–∏–µ –µ—Å—Ç—å.
    """
    try:
        # –ï—Å–ª–∏ –¥–∞—Ç—ã –Ω–µ –∑–∞–¥–∞–Ω—ã ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–µ–≥–æ–¥–Ω—è—à–Ω—é—é
        if not start_date or not end_date:
            today = datetime.now(CONFIG.timezone).date()
            start_date = end_date = today
        else:
            start_date = start_date if isinstance(start_date, date) else start_date.date()
            end_date = end_date if isinstance(end_date, date) else end_date.date()

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –ª–æ–∫–∞—Ü–∏—è–º
        db.cursor.execute('''
            SELECT COALESCE(u.location, '–ù–µ —É–∫–∞–∑–∞–Ω–æ'), SUM(o.quantity)
            FROM orders o
            JOIN users u ON o.user_id = u.id
            WHERE o.target_date BETWEEN ? AND ?
              AND o.is_cancelled = FALSE
            GROUP BY COALESCE(u.location, '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
        ''', (start_date.isoformat(), end_date.isoformat()))

        location_data = dict(db.cursor.fetchall())

        # –û–±—ä–µ–¥–∏–Ω—è–µ–º "–û—Ñ–∏—Å" –∏ "–ü–¶ 2"
        office_portions = location_data.get("–û—Ñ–∏—Å", 0) + location_data.get("–ü–¶ 2", 0)
        pc1_portions = location_data.get("–ü–¶ 1", 0)
        warehouse_portions = location_data.get("–°–∫–ª–∞–¥", 0)
        unregistered_portions = location_data.get("–ù–µ —É–∫–∞–∑–∞–Ω–æ", 0)

        total_portions = office_portions + pc1_portions + warehouse_portions + unregistered_portions

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        period_text = (
            f"{start_date.strftime('%d.%m.%Y')}"
            if start_date == end_date
            else f"{start_date.strftime('%d.%m.%Y')} ‚Äî {end_date.strftime('%d.%m.%Y')}"
        )

        # –û—Å–Ω–æ–≤–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏ –æ—Ç—á–µ—Ç–∞
        message_lines = [
            f"üìã *–ó–∞–∫–∞–∑—ã –Ω–∞* | {period_text}",
            f"‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ",
            f"üìå –í—Å–µ–≥–æ: *{total_portions}* –ø–æ—Ä—Ü–∏–π\n",
            f"‚Ä¢ üè¢ –û—Ñ–∏—Å: *{office_portions}*",
            f"‚Ä¢ üè≠ –ü–¶ 1: *{pc1_portions}*",
            f"‚Ä¢ üì¶ –°–∫–ª–∞–¥: *{warehouse_portions}*"
        ]

        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫—É —Å –Ω–µ–∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
        if unregistered_portions > 0:
            message_lines.append(f"‚Ä¢ ‚ùì –ù–µ–∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ: *{unregistered_portions}*")

        # –°–æ–±–∏—Ä–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        message = "\n".join(message_lines)

        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text=message,
            parse_mode="Markdown"
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ—Ç—á–µ—Ç–∞ –¥–ª—è –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞: {e}", exc_info=True)
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –æ—Ç—á—ë—Ç–∞.")
        raise
    
async def export_accounting_report(
    update: Update,
    context: ContextTypes.DEFAULT_TYPE,
    start_date: Optional[date] = None,
    end_date: Optional[date] = None
):
    try:
        # 1. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —á–∏—Å–µ–ª
        import locale
        try:
            locale.setlocale(locale.LC_NUMERIC, 'ru_RU.UTF-8')
        except:
            pass

        # 2. –°–ª–æ–≤–∞—Ä—å –º–µ—Å—è—Ü–µ–≤
        month_names = {
            1: "–Ø–Ω–≤–∞—Ä—å", 2: "–§–µ–≤—Ä–∞–ª—å", 3: "–ú–∞—Ä—Ç", 4: "–ê–ø—Ä–µ–ª—å",
            5: "–ú–∞–π", 6: "–ò—é–Ω—å", 7: "–ò—é–ª—å", 8: "–ê–≤–≥—É—Å—Ç",
            9: "–°–µ–Ω—Ç—è–±—Ä—å", 10: "–û–∫—Ç—è–±—Ä—å", 11: "–ù–æ—è–±—Ä—å", 12: "–î–µ–∫–∞–±—Ä—å"
        }

        reports_dir = ensure_reports_dir('accounting')
        now = datetime.now(CONFIG.timezone)
        month_year = f"{month_names[now.month]} {now.year}"

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞—Ç
        if not start_date or not end_date:
            start_date = end_date = now.date()
        else:
            start_date = start_date if isinstance(start_date, date) else start_date.date()
            end_date = end_date if isinstance(end_date, date) else end_date.date()

        if start_date > end_date:
            start_date, end_date = end_date, start_date

        # –°–æ–∑–¥–∞–µ–º Excel —Ñ–∞–π–ª
        wb = openpyxl.Workbook()
        ws = wb.active
        ws.title = "–£–¥–µ—Ä–∂–∞–Ω–∏—è –∑–∞ –æ–±–µ–¥—ã"
        
        # –ó–∞–≥–æ–ª–æ–≤–∫–∏
        ws.append(["–°–ø–∏—Å–æ–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –Ω–∞ —É–¥–µ—Ä–∂–∞–Ω–∏–µ –æ–±–µ–¥–æ–≤ –∏–∑ –µ–∂–µ–º–µ—Å—è—á–Ω–æ–π –ø—Ä–µ–º–∏–∏"])
        ws.append([f"–∑–∞ {month_year} –≥."])
        ws.append([])
        ws.append(["", "—É–¥–µ—Ä–∂–∞–Ω–∏–µ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ 1 –æ–±–µ–¥–∞ —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç", "150,00 —Ä—É–±. (–±–µ–∑ –ù–î–§–õ)"])
        ws.append(["", "", "172,41 —Ä—É–±. (—Å –ù–î–§–õ 13%)"])
        ws.append([])
        
        # –ó–∞–≥–æ–ª–æ–≤–∫–∏ —Ç–∞–±–ª–∏—Ü—ã
        headers = [
            "–ü–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ",
            "–§–ò–û",
            "–ö–æ–ª-–≤–æ –æ–±–µ–¥–æ–≤",
            "–î–æ–ª–∂–Ω–æ—Å—Ç—å",
            "–¢–µ—Ä—Ä–∏—Ç–æ—Ä–∏—è",
            "–î–∞—Ç–∞ –ø—Ä–∏–µ–º–∞",
            "–°—É–º–º–∞ —É–¥–µ—Ä–∂–∞–Ω–∏—è –±–µ–∑ –ù–î–§–õ",
            "–°—É–º–º–∞ —É–¥–µ—Ä–∂–∞–Ω–∏—è —Å –ù–î–§–õ"
        ]
        ws.append(headers)
        ws.auto_filter.ref = f"A{ws.max_row}:H{ws.max_row}"

        # –û–ë–ù–û–í–õ–ï–ù–ù–´–ô –ó–ê–ü–†–û–° - –ø–æ–¥—Ç—è–≥–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã users
        query = '''
            SELECT 
                COALESCE(u.department, '–ù–µ —É–∫–∞–∑–∞–Ω–æ') as department,
                u.full_name,
                SUM(o.quantity) as portions,
                COALESCE(u.position, '–ù–µ —É–∫–∞–∑–∞–Ω–∞') as position,
                COALESCE(u.city, '–ù–µ —É–∫–∞–∑–∞–Ω–∞') as city,
                COALESCE(DATE(u.created_at), '–ù–µ —É–∫–∞–∑–∞–Ω–∞') as hire_date
            FROM orders o
            JOIN users u ON o.user_id = u.id
            WHERE o.target_date BETWEEN ? AND ?
              AND o.is_cancelled = FALSE
            GROUP BY u.id
            ORDER BY u.department, u.full_name
        '''

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
        total_portions = 0
        total_without_ndfl = 0
        total_with_ndfl = 0

        # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞
        db.cursor.execute(query, (start_date.isoformat(), end_date.isoformat()))
        rows = db.cursor.fetchall()

        if not rows:
            ws.append(["–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥", "", "", "", "", "", "", ""])
        else:
            for row in rows:
                portions = row[2]
                amount_without_ndfl = portions * 150
                amount_with_ndfl = round(amount_without_ndfl / 0.87, 2)
                
                ws.append([
                    row[0],  # department - –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ
                    row[1],  # full_name - –§–ò–û
                    portions,  # –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±–µ–¥–æ–≤
                    row[3],  # position - –¥–æ–ª–∂–Ω–æ—Å—Ç—å
                    row[4],  # city - —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏—è (–≥–æ—Ä–æ–¥)
                    row[5],  # hire_date - –¥–∞—Ç–∞ –ø—Ä–∏–µ–º–∞ (created_at)
                    amount_without_ndfl,  # —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
                    amount_with_ndfl      # —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
                ])
                
                total_portions += portions
                total_without_ndfl += amount_without_ndfl
                total_with_ndfl += amount_with_ndfl

            # –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç—Ä–æ–∫–∞
            ws.append([
                "–í–°–ï–ì–û",
                "",
                total_portions,
                "",
                "",
                "",
                total_without_ndfl,  # —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
                total_with_ndfl      # —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
            ])

        # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
        bold_font = Font(bold=True)
        money_format = '# ##0.00'
        
        # –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∏–ª–µ–π
        for row in ws.iter_rows(min_row=1, max_row=6):
            for cell in row:
                cell.font = bold_font
                
        for cell in ws[7]:
            cell.font = bold_font
            
        for cell in ws[ws.max_row]:
            cell.font = bold_font
        
        # –§–æ—Ä–º–∞—Ç –¥–µ–Ω–µ–∂–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π (–ø—Ä–∏–º–µ–Ω—è–µ–º –∫ —á–∏—Å–ª–æ–≤—ã–º —è—á–µ–π–∫–∞–º)
        for row in ws.iter_rows(min_row=8, max_row=ws.max_row):
            for cell in row[6:8]:
                cell.number_format = money_format
                # –î–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —á–∏—Å–µ–ª –≤ Excel
                if isinstance(cell.value, (int, float)):
                    cell.value = float(cell.value)
        
        # –ê–≤—Ç–æ–ø–æ–¥–±–æ—Ä —à–∏—Ä–∏–Ω—ã —Å—Ç–æ–ª–±—Ü–æ–≤
        column_widths = {}
        for row in ws.iter_rows():
            for cell in row:
                length = len(str(cell.value)) * 1.2
                if cell.column_letter not in column_widths or length > column_widths[cell.column_letter]:
                    column_widths[cell.column_letter] = length
        
        for col, width in column_widths.items():
            ws.column_dimensions[col].width = min(width, 50)
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
        file_name = f"salary_deductions_{now.strftime('%Y%m')}.xlsx"
        file_path = os.path.join(reports_dir, file_name)
        wb.save(file_path)
        
        # –§—É–Ω–∫—Ü–∏—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤–∞–ª—é—Ç—ã –¥–ª—è –≤—ã–≤–æ–¥–∞ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
        def format_currency(amount):
            return f"{float(amount):,.2f}".replace(",", " ").replace(".", ",")

        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–∞
        caption = (
            f"üìã –û—Ç—á–µ—Ç –¥–ª—è —É–¥–µ—Ä–∂–∞–Ω–∏–π –∏–∑ –∑–∞—Ä–ø–ª–∞—Ç—ã\n"
            f"üìÖ –ü–µ—Ä–∏–æ–¥: {start_date.strftime('%d.%m.%Y')} - {end_date.strftime('%d.%m.%Y')}\n"
            f"üçΩ –í—Å–µ–≥–æ –æ–±–µ–¥–æ–≤: {total_portions}\n"
            f"üí∞ –°—É–º–º–∞ —É–¥–µ—Ä–∂–∞–Ω–∏—è: {format_currency(total_with_ndfl)} —Ä—É–±. (—Å –ù–î–§–õ)"
        )

        with open(file_path, 'rb') as file:
            await context.bot.send_document(
                chat_id=update.effective_chat.id,
                document=file,
                caption=caption,
                filename=file_name
            )

        return file_path

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç—á–µ—Ç–∞: {e}", exc_info=True)
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ—Ç—á–µ—Ç–∞.")
        raise
    
async def export_monthly_report(
    update: Update,
    context: ContextTypes.DEFAULT_TYPE,
    start_date: Optional[date] = None,
    end_date: Optional[date] = None,
    is_daily: bool = False
):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ–≥–æ –æ—Ç—á—ë—Ç–∞ —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é —É–∫–∞–∑–∞–Ω–∏—è –¥–∞—Ç"""
    try:
        if update.effective_user.id not in CONFIG.admin_ids:
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
            return

        now = datetime.now(CONFIG.timezone)
        
        # –ï—Å–ª–∏ –¥–∞—Ç—ã –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω—ã - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü
        if not start_date or not end_date:
            month_start = now.replace(day=1).date()
            end_date = now.date()
        else:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ start_date <= end_date
            if start_date > end_date:
                start_date, end_date = end_date, start_date

        reports_dir = ensure_reports_dir('admin')
        
        wb = openpyxl.Workbook()
        
        # –£–¥–∞–ª—è–µ–º –ª–∏—Å—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
        if 'Sheet' in wb.sheetnames:
            del wb['Sheet']
        
        # –°–æ–∑–¥–∞–µ–º –ª–∏—Å—Ç "–í—Å–µ –∑–∞–∫–∞–∑—ã" (–ø–µ—Ä–≤—ã–º –≤ –∫–Ω–∏–≥–µ)
        ws_all = wb.create_sheet("–í—Å–µ –∑–∞–∫–∞–∑—ã", 0)
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–æ–Ω–∫—É "–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞" –ø–æ—Å–ª–µ –¥–∞—Ç—ã
        all_headers = ["–î–∞—Ç–∞ –æ–±–µ–¥–∞", "–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞", "–°–æ—Ç—Ä—É–¥–Ω–∏–∫", "–õ–æ–∫–∞—Ü–∏—è", "–ü–æ–¥–ø–∏—Å—å", "–ö–æ–ª-–≤–æ –æ–±–µ–¥–æ–≤", "–ò—Å—Ç–æ—á–Ω–∏–∫ –∑–∞–∫–∞–∑–∞"]
        ws_all.append(all_headers)
        ws_all.auto_filter.ref = "A1:G1"  # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω —Ñ–∏–ª—å—Ç—Ä–∞
        
        # –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º –í–°–ï –∑–∞–∫–∞–∑—ã –¥–ª—è –æ–±—â–µ–≥–æ –ª–∏—Å—Ç–∞
        if is_daily:
            db.cursor.execute('''
                SELECT 
                    o.target_date,
                    u.full_name,
                    COALESCE(u.location, '–ù–µ —É–∫–∞–∑–∞–Ω–æ'),
                    o.quantity,
                    o.is_from_bitrix,
                    o.created_at,
                    o.bitrix_order_id
                FROM orders o
                JOIN users u ON o.user_id = u.id
                WHERE o.target_date = ?
                AND o.is_cancelled = FALSE
                AND u.is_deleted = FALSE
                ORDER BY 
                    o.target_date,
                    CASE WHEN o.bitrix_order_id IS NULL THEN o.created_at ELSE o.bitrix_order_id END,
                    u.full_name
            ''', (start_date.isoformat(),))
        else:
            db.cursor.execute('''
                SELECT 
                    o.target_date,
                    u.full_name,
                    COALESCE(u.location, '–ù–µ —É–∫–∞–∑–∞–Ω–æ'),
                    o.quantity,
                    o.is_from_bitrix,
                    o.created_at,
                    o.bitrix_order_id
                FROM orders o
                JOIN users u ON o.user_id = u.id
                WHERE o.target_date BETWEEN ? AND ?
                AND o.is_cancelled = FALSE
                AND u.is_deleted = FALSE
                ORDER BY 
                    o.target_date,
                    CASE WHEN o.bitrix_order_id IS NULL THEN o.created_at ELSE o.bitrix_order_id END,
                    u.full_name
            ''', (start_date.isoformat(), end_date.isoformat()))
        
        all_orders = db.cursor.fetchall()
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∑–∞–∫–∞–∑—ã –ø–æ –¥–∞—Ç–µ –¥–ª—è –æ–±—â–µ–≥–æ –ª–∏—Å—Ç–∞
        orders_by_date = {}
        for row in all_orders:
            date_key = row[0]
            if date_key not in orders_by_date:
                orders_by_date[date_key] = []
            orders_by_date[date_key].append(row)
        
        # –ó–∞–ø–æ–ª–Ω—è–µ–º –ª–∏—Å—Ç "–í—Å–µ –∑–∞–∫–∞–∑—ã" —Å –Ω–æ–º–µ—Ä–æ–º –∑–∞–∫–∞–∑–∞
        for date_key in sorted(orders_by_date.keys()):
            for row in orders_by_date[date_key]:
                target_date = datetime.strptime(row[0], "%Y-%m-%d").strftime("%d.%m.%Y")
                source = "–ë–∏—Ç—Ä–∏–∫—Å" if row[4] else "–ë–æ—Ç"
                # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞ (bitrix_order_id) –∏–ª–∏ –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É –µ—Å–ª–∏ NULL
                order_number = row[6] if row[6] is not None else ""
                ws_all.append([target_date, order_number, row[1], row[2], "", row[3], source])
        
        # –°–æ–∑–¥–∞–µ–º –ª–∏—Å—Ç—ã –¥–ª—è –∫–∞–∂–¥–æ–π –ª–æ–∫–∞—Ü–∏–∏ (–æ–±—ä–µ–¥–∏–Ω—è–µ–º "–û—Ñ–∏—Å" –∏ "–ü–¶ 2")
        for location in CONFIG.locations:
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ –ª–∏—Å—Ç–∞ –¥–ª—è "–ü–¶ 2"
            if location == "–ü–¶ 2":
                continue
                
            ws = wb.create_sheet(location)
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–æ–Ω–∫—É "–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞" –≤ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –ª–∏—Å—Ç–æ–≤ –ª–æ–∫–∞—Ü–∏–π
            headers = ["–î–∞—Ç–∞ –æ–±–µ–¥–∞", "–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞", "–°–æ—Ç—Ä—É–¥–Ω–∏–∫", "–¢–µ—Ä—Ä–∏—Ç–æ—Ä–∏–∞–ª—å–Ω—ã–π –ø—Ä–∏–∑–Ω–∞–∫", "–ü–æ–¥–ø–∏—Å—å", "–ö–æ–ª-–≤–æ –æ–±–µ–¥–æ–≤", "–ò—Å—Ç–æ—á–Ω–∏–∫ –∑–∞–∫–∞–∑–∞"]
            ws.append(headers)
            ws.auto_filter.ref = "A1:G1"  # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω —Ñ–∏–ª—å—Ç—Ä–∞
            
            # –î–ª—è –ª–∏—Å—Ç–∞ "–û—Ñ–∏—Å" –≤–∫–ª—é—á–∞–µ–º —Ç–∞–∫–∂–µ –∑–∞–∫–∞–∑—ã –∏–∑ "–ü–¶ 2"
            if location == "–û—Ñ–∏—Å":
                location_orders = [row for row in all_orders if row[2] in ["–û—Ñ–∏—Å", "–ü–¶ 2"]]
            else:
                location_orders = [row for row in all_orders if row[2] == location]
            
            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ –¥–ª—è —Ç–µ–∫—É—â–µ–π –ª–æ–∫–∞—Ü–∏–∏
            loc_orders_by_date = {}
            for row in location_orders:
                date_key = row[0]
                if date_key not in loc_orders_by_date:
                    loc_orders_by_date[date_key] = []
                loc_orders_by_date[date_key].append(row)
            
            # –ó–∞–ø–æ–ª–Ω—è–µ–º –ª–∏—Å—Ç –ª–æ–∫–∞—Ü–∏–∏ —Å –Ω–æ–º–µ—Ä–æ–º –∑–∞–∫–∞–∑–∞
            for date_key in sorted(loc_orders_by_date.keys()):
                for row in loc_orders_by_date[date_key]:
                    target_date = datetime.strptime(row[0], "%Y-%m-%d").strftime("%d.%m.%Y")
                    source = "–ë–∏—Ç—Ä–∏–∫—Å" if row[4] else "–ë–æ—Ç"
                    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞ (bitrix_order_id) –∏–ª–∏ –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É –µ—Å–ª–∏ NULL
                    order_number = row[6] if row[6] is not None else ""
                    ws.append([target_date, order_number, row[1], row[2], "", row[3], source])
        
        # –õ–∏—Å—Ç "–ò—Ç–æ–≥–∏"
        ws_summary = wb.create_sheet("–ò—Ç–æ–≥–∏")
        summary_headers = ["–õ–æ–∫–∞—Ü–∏—è", "–ü–æ—Ä—Ü–∏–∏"]
        ws_summary.append(summary_headers)
        ws_summary.auto_filter.ref = "A1:B1"
        
        # –ü–æ–¥—Å—á–µ—Ç –∏—Ç–æ–≥–æ–≤ (–æ–±—ä–µ–¥–∏–Ω—è–µ–º "–û—Ñ–∏—Å" –∏ "–ü–¶ 2")
        location_totals = {}
        for row in all_orders:
            location = row[2]
            # –û–±—ä–µ–¥–∏–Ω—è–µ–º "–û—Ñ–∏—Å" –∏ "–ü–¶ 2" –≤ –æ–¥–Ω—É –∫–∞—Ç–µ–≥–æ—Ä–∏—é
            if location == "–ü–¶ 2":
                location = "–û—Ñ–∏—Å"
            quantity = row[3]
            if location not in location_totals:
                location_totals[location] = 0
            location_totals[location] += quantity
        
        total = 0
        for location, portions in sorted(location_totals.items(), key=lambda x: x[1], reverse=True):
            ws_summary.append([location, portions])
            total += portions
        
        ws_summary.append(["–í–°–ï–ì–û", total])
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
        bold_font = Font(bold=True)
        for sheet in wb.worksheets:
            # –ó–∞–≥–æ–ª–æ–≤–∫–∏ –∂–∏—Ä–Ω—ã–º
            for row in sheet.iter_rows(min_row=1, max_row=1):
                for cell in row:
                    cell.font = bold_font
            
            # –ê–≤—Ç–æ–ø–æ–¥–±–æ—Ä —à–∏—Ä–∏–Ω—ã —Å—Ç–æ–ª–±—Ü–æ–≤
            for col in sheet.columns:
                max_length = max(len(str(cell.value)) for cell in col)
                sheet.column_dimensions[col[0].column_letter].width = max_length + 2

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
        timestamp = now.strftime("%Y%m%d_%H%M%S")
        file_name = f"admin_report_{timestamp}.xlsx"
        file_path = os.path.join(reports_dir, file_name)
        wb.save(file_path)
        
        # –ú–µ–Ω—è–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –æ—Ç—á—ë—Ç–∞
        if is_daily:
            caption = (
                f"üìÖ –ê–¥–º–∏–Ω –æ—Ç—á–µ—Ç –∑–∞ {start_date.strftime('%d.%m.%Y')}\n"
                f"üçΩ –í—Å–µ–≥–æ –ø–æ—Ä—Ü–∏–π: {total}"
            )
        else:
            caption = (
                f"üìÖ –ê–¥–º–∏–Ω –æ—Ç—á–µ—Ç –∑–∞ {start_date.strftime('%B %Y')}\n"
                f"üçΩ –í—Å–µ–≥–æ –ø–æ—Ä—Ü–∏–π: {total}"
            )
        
        with open(file_path, 'rb') as file:
            await context.bot.send_document(
                chat_id=update.effective_chat.id,
                document=file,
                caption=caption,
                filename=file_name
            )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –∞–¥–º–∏–Ω –æ—Ç—á—ë—Ç–∞: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç—á—ë—Ç–∞")
        
async def export_daily_admin_report(
    update: Update, 
    context: ContextTypes.DEFAULT_TYPE, 
    target_date: Optional[date] = None
):
    """–§–æ—Ä–º–∏—Ä—É–µ—Ç –¥–Ω–µ–≤–Ω–æ–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–π –æ—Ç—á–µ—Ç"""
    logger.info(f"–°–æ–∑–¥–∞–Ω–∏–µ –¥–Ω–µ–≤–Ω–æ–≥–æ –∞–¥–º–∏–Ω –æ—Ç—á–µ—Ç–∞, –¥–∞—Ç–∞: {target_date}")
    if not target_date:
        target_date = datetime.now(CONFIG.timezone).date()
    return await export_monthly_report(
        update, 
        context, 
        target_date, 
        target_date,
        is_daily=True  # –ü–µ—Ä–µ–¥–∞—ë–º —Ñ–ª–∞–≥, —á—Ç–æ —ç—Ç–æ –¥–Ω–µ–≤–Ω–æ–π –æ—Ç—á—ë—Ç
    )
    
async def export_daily_orders_for_provider(update: Update, context: ContextTypes.DEFAULT_TYPE, target_date: Optional[date] = None):
    """–§–æ—Ä–º–∏—Ä—É–µ—Ç –¥–Ω–µ–≤–Ω–æ–π –æ—Ç—á–µ—Ç –¥–ª—è –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤"""
    logger.info(f"–°–æ–∑–¥–∞–Ω–∏–µ –¥–Ω–µ–≤–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ –¥–ª—è –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞, –¥–∞—Ç–∞: {target_date}")
    if not target_date:
        target_date = datetime.now(CONFIG.timezone).date()
    return await export_orders_for_provider(update, context, target_date, target_date)