# ##report_generators.py
from openpyxl.styles import Font
from typing import Optional
import openpyxl
from datetime import datetime, date
from telegram import Update
from telegram.ext import ContextTypes
import os
import logging
import matplotlib

from db import CONFIG
matplotlib.use('Agg')  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±—ç–∫–µ–Ω–¥, –Ω–µ —Ç—Ä–µ–±—É—é—â–∏–π GUI
import matplotlib.pyplot as plt
try:
    from openpyxl.styles import Font
except RuntimeError:  # –î–ª—è –æ–∫—Ä—É–∂–µ–Ω–∏–π –±–µ–∑ GUI
    class Font:
        def __init__(self, bold=False):
            self.bold = bold

from admin import ensure_reports_dir
from settings import SETTINGS_CONFIG

from db import db

logger = logging.getLogger(__name__)

async def export_orders_for_provider(
    update: Update,
    context: ContextTypes.DEFAULT_TYPE,
    start_date: Optional[date] = None,
    end_date: Optional[date] = None
):
    """
    –§–æ—Ä–º–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç—á—ë—Ç –¥–ª—è –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤.
    –û–±—ä–µ–¥–∏–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ –ª–æ–∫–∞—Ü–∏—è–º "–û—Ñ–∏—Å" –∏ "–ü–¶ 2".
    –î–æ–±–∞–≤–ª—è–µ—Ç —Å—Ç—Ä–æ–∫—É —Å –Ω–µ–∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º–∏, –µ—Å–ª–∏ —Ç–∞–∫–∏–µ –µ—Å—Ç—å.
    """
    try:
        # –ï—Å–ª–∏ –¥–∞—Ç—ã –Ω–µ –∑–∞–¥–∞–Ω—ã ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–µ–≥–æ–¥–Ω—è—à–Ω—é—é
        if not start_date or not end_date:
            today = datetime.now(CONFIG.timezone).date()
            start_date = end_date = today
        else:
            start_date = start_date if isinstance(start_date, date) else start_date.date()
            end_date = end_date if isinstance(end_date, date) else end_date.date()

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –ª–æ–∫–∞—Ü–∏—è–º
        db.cursor.execute('''
            SELECT COALESCE(u.location, '–ù–µ —É–∫–∞–∑–∞–Ω–æ'), SUM(o.quantity)
            FROM orders o
            JOIN users u ON o.user_id = u.id
            WHERE o.target_date BETWEEN ? AND ?
              AND o.is_cancelled = FALSE
            GROUP BY COALESCE(u.location, '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
        ''', (start_date.isoformat(), end_date.isoformat()))

        location_data = dict(db.cursor.fetchall())

        # –û–±—ä–µ–¥–∏–Ω—è–µ–º "–û—Ñ–∏—Å" –∏ "–ü–¶ 2"
        office_portions = location_data.get("–û—Ñ–∏—Å", 0) + location_data.get("–ü–¶ 2", 0)
        pc1_portions = location_data.get("–ü–¶ 1", 0)
        warehouse_portions = location_data.get("–°–∫–ª–∞–¥", 0)
        unregistered_portions = location_data.get("–ù–µ —É–∫–∞–∑–∞–Ω–æ", 0)

        total_portions = office_portions + pc1_portions + warehouse_portions + unregistered_portions

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        period_text = (
            f"{start_date.strftime('%d.%m.%Y')}"
            if start_date == end_date
            else f"{start_date.strftime('%d.%m.%Y')} ‚Äî {end_date.strftime('%d.%m.%Y')}"
        )

        # –û—Å–Ω–æ–≤–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏ –æ—Ç—á–µ—Ç–∞
        message_lines = [
            f"üìã *–ó–∞–∫–∞–∑—ã –Ω–∞* | {period_text}",
            f"‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ",
            f"üìå –í—Å–µ–≥–æ: *{total_portions}* –ø–æ—Ä—Ü–∏–π\n",
            f"‚Ä¢ üè¢ –û—Ñ–∏—Å: *{office_portions}*",
            f"‚Ä¢ üè≠ –ü–¶ 1: *{pc1_portions}*",
            f"‚Ä¢ üì¶ –°–∫–ª–∞–¥: *{warehouse_portions}*"
        ]

        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫—É —Å –Ω–µ–∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
        if unregistered_portions > 0:
            message_lines.append(f"‚Ä¢ ‚ùì –ù–µ–∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ: *{unregistered_portions}*")

        # –°–æ–±–∏—Ä–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        message = "\n".join(message_lines)

        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text=message,
            parse_mode="Markdown"
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ—Ç—á–µ—Ç–∞ –¥–ª—è –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞: {e}", exc_info=True)
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –æ—Ç—á—ë—Ç–∞.")
        raise
    
async def export_accounting_report(
    update: Update,
    context: ContextTypes.DEFAULT_TYPE,
    start_date: Optional[date] = None,
    end_date: Optional[date] = None
):
    try:
        # 1. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —á–∏—Å–µ–ª
        import locale
        try:
            locale.setlocale(locale.LC_NUMERIC, 'ru_RU.UTF-8')
        except:
            pass

        # 2. –°–ª–æ–≤–∞—Ä—å –º–µ—Å—è—Ü–µ–≤
        month_names = {
            1: "–Ø–Ω–≤–∞—Ä—å", 2: "–§–µ–≤—Ä–∞–ª—å", 3: "–ú–∞—Ä—Ç", 4: "–ê–ø—Ä–µ–ª—å",
            5: "–ú–∞–π", 6: "–ò—é–Ω—å", 7: "–ò—é–ª—å", 8: "–ê–≤–≥—É—Å—Ç",
            9: "–°–µ–Ω—Ç—è–±—Ä—å", 10: "–û–∫—Ç—è–±—Ä—å", 11: "–ù–æ—è–±—Ä—å", 12: "–î–µ–∫–∞–±—Ä—å"
        }

        reports_dir = ensure_reports_dir('accounting')
        now = datetime.now(CONFIG.timezone)
        month_year = f"{month_names[now.month]} {now.year}"

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞—Ç
        if not start_date or not end_date:
            start_date = end_date = now.date()
        else:
            start_date = start_date if isinstance(start_date, date) else start_date.date()
            end_date = end_date if isinstance(end_date, date) else end_date.date()

        if start_date > end_date:
            start_date, end_date = end_date, start_date

        # –°–æ–∑–¥–∞–µ–º Excel —Ñ–∞–π–ª
        wb = openpyxl.Workbook()
        ws = wb.active
        ws.title = "–£–¥–µ—Ä–∂–∞–Ω–∏—è –∑–∞ –æ–±–µ–¥—ã"
        
        # –ó–∞–≥–æ–ª–æ–≤–∫–∏
        ws.append(["–°–ø–∏—Å–æ–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –Ω–∞ —É–¥–µ—Ä–∂–∞–Ω–∏–µ –æ–±–µ–¥–æ–≤ –∏–∑ –µ–∂–µ–º–µ—Å—è—á–Ω–æ–π –ø—Ä–µ–º–∏–∏"])
        ws.append([f"–∑–∞ {month_year} –≥."])
        ws.append([])
        ws.append(["", "—É–¥–µ—Ä–∂–∞–Ω–∏–µ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ 1 –æ–±–µ–¥–∞ —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç", "150,00 —Ä—É–±. (–±–µ–∑ –ù–î–§–õ)"])
        ws.append(["", "", "172,41 —Ä—É–±. (—Å –ù–î–§–õ 13%)"])
        ws.append([])
        
        # –ó–∞–≥–æ–ª–æ–≤–∫–∏ —Ç–∞–±–ª–∏—Ü—ã
        headers = [
            "–ü–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ",
            "–§–ò–û",
            "–ö–æ–ª-–≤–æ –æ–±–µ–¥–æ–≤",
            "–î–æ–ª–∂–Ω–æ—Å—Ç—å",
            "–¢–µ—Ä—Ä–∏—Ç–æ—Ä–∏—è",
            "–î–∞—Ç–∞ –ø—Ä–∏–µ–º–∞",
            "–°—É–º–º–∞ —É–¥–µ—Ä–∂–∞–Ω–∏—è –±–µ–∑ –ù–î–§–õ",
            "–°—É–º–º–∞ —É–¥–µ—Ä–∂–∞–Ω–∏—è —Å –ù–î–§–õ"
        ]
        ws.append(headers)
        ws.auto_filter.ref = f"A{ws.max_row}:H{ws.max_row}"

        # –ó–∞–ø—Ä–æ—Å —Å –∑–∞–≥–ª—É—à–∫–∞–º–∏ –¥–ª—è –≤—Å–µ—Ö –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö –ø–æ–ª–µ–π
        query = '''
            SELECT 
                '–û—Å–Ω–æ–≤–Ω–æ–π –æ—Ñ–∏—Å' as department,
                u.full_name,
                SUM(o.quantity) as portions,
                '–°–æ—Ç—Ä—É–¥–Ω–∏–∫' as position,
                '–ù–µ —É–∫–∞–∑–∞–Ω–∞' as location,
                '–ù–µ —É–∫–∞–∑–∞–Ω–∞' as hire_date
            FROM orders o
            JOIN users u ON o.user_id = u.id
            WHERE o.target_date BETWEEN ? AND ?
              AND o.is_cancelled = FALSE
            GROUP BY u.id
            ORDER BY u.full_name
        '''

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
        total_portions = 0
        total_without_ndfl = 0
        total_with_ndfl = 0

        # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞
        db.cursor.execute(query, (start_date.isoformat(), end_date.isoformat()))
        rows = db.cursor.fetchall()

        if not rows:
            ws.append(["–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥", "", "", "", "", "", "", ""])
        else:
            for row in rows:
                portions = row[2]
                amount_without_ndfl = portions * 150
                amount_with_ndfl = round(amount_without_ndfl / 0.87, 2)
                
                ws.append([
                    row[0],  # department
                    row[1],  # full_name
                    portions,
                    row[3],  # position
                    row[4],  # location
                    row[5],  # hire_date
                    amount_without_ndfl,  # —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
                    amount_with_ndfl      # —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
                ])
                
                total_portions += portions
                total_without_ndfl += amount_without_ndfl
                total_with_ndfl += amount_with_ndfl

            # –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç—Ä–æ–∫–∞
            ws.append([
                "–í–°–ï–ì–û",
                "",
                total_portions,
                "",
                "",
                "",
                total_without_ndfl,  # —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
                total_with_ndfl      # —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
            ])

        # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
        bold_font = Font(bold=True)
        money_format = '# ##0.00'
        
        # –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∏–ª–µ–π
        for row in ws.iter_rows(min_row=1, max_row=6):
            for cell in row:
                cell.font = bold_font
                
        for cell in ws[7]:
            cell.font = bold_font
            
        for cell in ws[ws.max_row]:
            cell.font = bold_font
        
        # –§–æ—Ä–º–∞—Ç –¥–µ–Ω–µ–∂–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π (–ø—Ä–∏–º–µ–Ω—è–µ–º –∫ —á–∏—Å–ª–æ–≤—ã–º —è—á–µ–π–∫–∞–º)
        for row in ws.iter_rows(min_row=8, max_row=ws.max_row):
            for cell in row[6:8]:
                cell.number_format = money_format
                # –î–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —á–∏—Å–µ–ª –≤ Excel
                if isinstance(cell.value, (int, float)):
                    cell.value = float(cell.value)
        
        # –ê–≤—Ç–æ–ø–æ–¥–±–æ—Ä —à–∏—Ä–∏–Ω—ã —Å—Ç–æ–ª–±—Ü–æ–≤
        column_widths = {}
        for row in ws.iter_rows():
            for cell in row:
                length = len(str(cell.value)) * 1.2
                if cell.column_letter not in column_widths or length > column_widths[cell.column_letter]:
                    column_widths[cell.column_letter] = length
        
        for col, width in column_widths.items():
            ws.column_dimensions[col].width = min(width, 50)
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
        file_name = f"salary_deductions_{now.strftime('%Y%m')}.xlsx"
        file_path = os.path.join(reports_dir, file_name)
        wb.save(file_path)
        
        # –§—É–Ω–∫—Ü–∏—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤–∞–ª—é—Ç—ã –¥–ª—è –≤—ã–≤–æ–¥–∞ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
        def format_currency(amount):
            return f"{float(amount):,.2f}".replace(",", " ").replace(".", ",")

        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–∞
        caption = (
            f"üìã –û—Ç—á–µ—Ç –¥–ª—è —É–¥–µ—Ä–∂–∞–Ω–∏–π –∏–∑ –∑–∞—Ä–ø–ª–∞—Ç—ã\n"
            f"üìÖ –ü–µ—Ä–∏–æ–¥: {start_date.strftime('%d.%m.%Y')} - {end_date.strftime('%d.%m.%Y')}\n"
            f"üçΩ –í—Å–µ–≥–æ –æ–±–µ–¥–æ–≤: {total_portions}\n"
            f"üí∞ –°—É–º–º–∞ —É–¥–µ—Ä–∂–∞–Ω–∏—è: {format_currency(total_with_ndfl)} —Ä—É–±. (—Å –ù–î–§–õ)"
        )

        with open(file_path, 'rb') as file:
            await context.bot.send_document(
                chat_id=update.effective_chat.id,
                document=file,
                caption=caption,
                filename=file_name
            )

        return file_path

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç—á–µ—Ç–∞: {e}", exc_info=True)
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ—Ç—á–µ—Ç–∞.")
        raise
    
async def export_monthly_report(
    update: Update,
    context: ContextTypes.DEFAULT_TYPE,
    start_date: Optional[date] = None,
    end_date: Optional[date] = None
):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –¥–ª—è —É–¥–µ—Ä–∂–∞–Ω–∏—è –∏–∑ –∑–∞—Ä–ø–ª–∞—Ç—ã"""
    try:
        if update.effective_user.id not in CONFIG.admin_ids:
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
            return

        now = datetime.now(CONFIG.timezone)
        
        # –ï—Å–ª–∏ –¥–∞—Ç—ã –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω—ã - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü
        if not start_date or not end_date:
            start_date = now.replace(day=1).date()
            end_date = now.date()
        else:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ start_date <= end_date
            if start_date > end_date:
                start_date, end_date = end_date, start_date

        reports_dir = ensure_reports_dir('salary_deductions')
        
        # –°–æ–∑–¥–∞–µ–º Excel —Ñ–∞–π–ª
        wb = openpyxl.Workbook()
        ws = wb.active
        ws.title = "–£–¥–µ—Ä–∂–∞–Ω–∏—è –∑–∞ –æ–±–µ–¥"
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –æ—Ç—á–µ—Ç–∞
        ws.append(["–°–ø–∏—Å–æ–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –Ω–∞ —É–¥–µ—Ä–∂–∞–Ω–∏–µ –æ–±–µ–¥–æ–≤ –∏–∑ –µ–∂–µ–º.–ø—Ä–µ–º–∏–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤"])
        ws.append([f"–∑–∞ {start_date.strftime('%B %Y')} –≥."])
        ws.append([])
        ws.append(["", "—É–¥–µ—Ä–∂–∞–Ω–∏–µ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ 1 –æ–±–µ–¥–∞ —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç", "150"])
        ws.append([])
        
        # –ó–∞–≥–æ–ª–æ–≤–∫–∏ —Ç–∞–±–ª–∏—Ü—ã
        headers = [
            "–ü–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ",
            "–§–ò–û –ë–∏—Ç—Ä–∏–∫—Å",
            "–ö–æ–ª-–≤–æ –æ–±–µ–¥–æ–≤",
            "–î–æ–ª–∂–Ω–æ—Å—Ç—å",
            "–¢–µ—Ä—Ä–∏—Ç–æ—Ä–∏—è",
            "–î–∞—Ç–∞ –ø—Ä–∏–µ–º–∞",
            "–°—É–º–º–∞ —É–¥–µ—Ä–∂–∞–Ω–∏—è –±–µ–∑ –ù–î–§–õ",
            "–°—É–º–º–∞ —É–¥–µ—Ä–∂–∞–Ω–∏—è —Å –ù–î–§–õ"
        ]
        ws.append(headers)
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –ë–î
        query = '''
            SELECT 
                COALESCE(u.department, '–ù–µ —É–∫–∞–∑–∞–Ω–æ') as department,
                u.full_name,
                SUM(o.quantity) as total_portions,
                COALESCE(u.position, '–ù–µ —É–∫–∞–∑–∞–Ω–æ') as position,
                COALESCE(u.location, '–ù–µ —É–∫–∞–∑–∞–Ω–æ') as location,
                CASE 
                    WHEN u.hire_date IS NULL THEN '–ù–µ —É–∫–∞–∑–∞–Ω–∞'
                    ELSE u.hire_date 
                END as hire_date
            FROM orders o
            JOIN users u ON o.user_id = u.id
            WHERE o.target_date BETWEEN ? AND ?
            AND o.is_cancelled = FALSE
            AND u.is_deleted = FALSE
            GROUP BY u.id
            ORDER BY department, u.full_name
        '''
        db.cursor.execute(query, (start_date.isoformat(), end_date.isoformat()))
        
        total_portions = 0
        total_without_ndfl = 0
        total_with_ndfl = 0
        
        for row in db.cursor.fetchall():
            department, full_name, portions, position, location, hire_date = row
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—É–º–º—ã
            amount_without_ndfl = portions * 150  # 150 —Ä—É–± –∑–∞ –æ–±–µ–¥
            amount_with_ndfl = round(amount_without_ndfl * 1.13)  # –ù–î–§–õ 13%
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –ø—Ä–∏–µ–º–∞
            hire_date_formatted = datetime.strptime(hire_date, "%Y-%m-%d").strftime("%d.%m.%Y") if hire_date else ""
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫—É –≤ –æ—Ç—á–µ—Ç
            ws.append([
                department,
                full_name,
                portions,
                position,
                location,
                hire_date_formatted,
                f"{amount_without_ndfl:,.2f}".replace(",", " ").replace(".", ","),
                f"{amount_with_ndfl:,.2f}".replace(",", " ").replace(".", ",")
            ])
            
            # –°—É–º–º–∏—Ä—É–µ–º –∏—Ç–æ–≥–∏
            total_portions += portions
            total_without_ndfl += amount_without_ndfl
            total_with_ndfl += amount_with_ndfl
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏—Ç–æ–≥–æ–≤—É—é —Å—Ç—Ä–æ–∫—É
        ws.append([
            "–í–°–ï–ì–û",
            "",
            total_portions,
            "",
            "",
            "",
            f"{total_without_ndfl:,.2f}".replace(",", " ").replace(".", ","),
            f"{total_with_ndfl:,.2f}".replace(",", " ").replace(".", ",")
        ])
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
        bold_font = Font(bold=True)
        money_format = '# ##0,00'
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –æ—Ç—á–µ—Ç–∞
        for row in ws.iter_rows(min_row=1, max_row=5):
            for cell in row:
                cell.font = bold_font
        
        # –ó–∞–≥–æ–ª–æ–≤–∫–∏ —Ç–∞–±–ª–∏—Ü—ã
        for cell in ws[6]:
            cell.font = bold_font
        
        # –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç—Ä–æ–∫–∞
        for cell in ws[ws.max_row]:
            cell.font = bold_font
        
        # –§–æ—Ä–º–∞—Ç –¥–µ–Ω–µ–∂–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
        for row in ws.iter_rows(min_row=7, max_row=ws.max_row):
            for cell in row[6:8]:  # –ö–æ–ª–æ–Ω–∫–∏ —Å —Å—É–º–º–∞–º–∏
                cell.number_format = money_format
        
        # –ê–≤—Ç–æ–ø–æ–¥–±–æ—Ä —à–∏—Ä–∏–Ω—ã —Å—Ç–æ–ª–±—Ü–æ–≤
        for col in ws.columns:
            max_length = max(len(str(cell.value)) for cell in col)
            ws.column_dimensions[col[0].column_letter].width = max_length + 2
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
        timestamp = now.strftime("%Y%m%d_%H%M%S")
        file_name = f"salary_deductions_{start_date.strftime('%Y%m')}.xlsx"
        file_path = os.path.join(reports_dir, file_name)
        wb.save(file_path)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
        caption = (
            f"üìã –û—Ç—á–µ—Ç –¥–ª—è —É–¥–µ—Ä–∂–∞–Ω–∏–π –∏–∑ –∑–∞—Ä–ø–ª–∞—Ç—ã\n"
            f"üìÖ –ü–µ—Ä–∏–æ–¥: {start_date.strftime('%B %Y')}\n"
            f"üçΩ –í—Å–µ–≥–æ –æ–±–µ–¥–æ–≤: {total_portions}\n"
            f"üí∞ –û–±—â–∞—è —Å—É–º–º–∞ —É–¥–µ—Ä–∂–∞–Ω–∏–π: {total_with_ndfl:,.2f} —Ä—É–±."
        )
        
        with open(file_path, 'rb') as file:
            await context.bot.send_document(
                chat_id=update.effective_chat.id,
                document=file,
                caption=caption,
                filename=file_name
            )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç—á–µ—Ç–∞ –¥–ª—è —É–¥–µ—Ä–∂–∞–Ω–∏–π: {e}", exc_info=True)
        await update.message.reply_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ—Ç—á–µ—Ç–∞ –¥–ª—è —É–¥–µ—Ä–∂–∞–Ω–∏–π."
        )
        raise
        
async def export_daily_admin_report(
    update: Update, 
    context: ContextTypes.DEFAULT_TYPE, 
    target_date: Optional[date] = None
):
    """–§–æ—Ä–º–∏—Ä—É–µ—Ç –¥–Ω–µ–≤–Ω–æ–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–π –æ—Ç—á–µ—Ç"""
    logger.info(f"–°–æ–∑–¥–∞–Ω–∏–µ –¥–Ω–µ–≤–Ω–æ–≥–æ –∞–¥–º–∏–Ω –æ—Ç—á–µ—Ç–∞, –¥–∞—Ç–∞: {target_date}")
    if not target_date:
        target_date = datetime.now(CONFIG.timezone).date()
    return await export_monthly_report(
        update, 
        context, 
        target_date, 
        target_date,
        is_daily=True  # –ü–µ—Ä–µ–¥–∞—ë–º —Ñ–ª–∞–≥, —á—Ç–æ —ç—Ç–æ –¥–Ω–µ–≤–Ω–æ–π –æ—Ç—á—ë—Ç
    )
    
async def export_daily_orders_for_provider(update: Update, context: ContextTypes.DEFAULT_TYPE, target_date: Optional[date] = None):
    """–§–æ—Ä–º–∏—Ä—É–µ—Ç –¥–Ω–µ–≤–Ω–æ–π –æ—Ç—á–µ—Ç –¥–ª—è –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤"""
    logger.info(f"–°–æ–∑–¥–∞–Ω–∏–µ –¥–Ω–µ–≤–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ –¥–ª—è –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞, –¥–∞—Ç–∞: {target_date}")
    if not target_date:
        target_date = datetime.now(CONFIG.timezone).date()
    return await export_orders_for_provider(update, context, target_date, target_date)