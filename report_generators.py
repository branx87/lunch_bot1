# ##report_generators.py
from openpyxl.styles import Font
from typing import Optional
import openpyxl
from datetime import datetime, date
from telegram import Update
from telegram.ext import ContextTypes
import os
import logging
import matplotlib

from config import CONFIG, LOCATIONS, TIMEZONE
matplotlib.use('Agg')  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±—ç–∫–µ–Ω–¥, –Ω–µ —Ç—Ä–µ–±—É—é—â–∏–π GUI
import matplotlib.pyplot as plt
try:
    from openpyxl.styles import Font
except RuntimeError:  # –î–ª—è –æ–∫—Ä—É–∂–µ–Ω–∏–π –±–µ–∑ GUI
    class Font:
        def __init__(self, bold=False):
            self.bold = bold

from admin import ensure_reports_dir
from settings import SETTINGS_CONFIG

from db import db

logger = logging.getLogger(__name__)

async def export_orders_for_provider(
    update: Update,
    context: ContextTypes.DEFAULT_TYPE,
    start_date: Optional[date] = None,
    end_date: Optional[date] = None
):
    """
    –§–æ—Ä–º–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç—á—ë—Ç –¥–ª—è –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤.
    –û–±—ä–µ–¥–∏–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ –ª–æ–∫–∞—Ü–∏—è–º "–û—Ñ–∏—Å" –∏ "–ü–¶ 2".
    """
    try:
        # –ï—Å–ª–∏ –¥–∞—Ç—ã –Ω–µ –∑–∞–¥–∞–Ω—ã ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–µ–≥–æ–¥–Ω—è—à–Ω—é—é
        if not start_date or not end_date:
            today = datetime.now(TIMEZONE).date()
            start_date = end_date = today
        else:
            start_date = start_date if isinstance(start_date, date) else start_date.date()
            end_date = end_date if isinstance(end_date, date) else end_date.date()

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –ª–æ–∫–∞—Ü–∏—è–º
        db.cursor.execute('''
            SELECT u.location, SUM(o.quantity)
            FROM orders o
            JOIN users u ON o.user_id = u.id
            WHERE o.target_date BETWEEN ? AND ?
              AND o.is_cancelled = FALSE
            GROUP BY u.location
        ''', (start_date.isoformat(), end_date.isoformat()))

        location_data = dict(db.cursor.fetchall())

        # –û–±—ä–µ–¥–∏–Ω—è–µ–º "–û—Ñ–∏—Å" –∏ "–ü–¶ 2"
        office_portions = location_data.get("–û—Ñ–∏—Å", 0) + location_data.get("–ü–¶ 2", 0)
        pc1_portions = location_data.get("–ü–¶ 1", 0)
        warehouse_portions = location_data.get("–°–∫–ª–∞–¥", 0)

        total_portions = office_portions + pc1_portions + warehouse_portions

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        period_text = (
            f"{start_date.strftime('%d.%m.%Y')}"
            if start_date == end_date
            else f"{start_date.strftime('%d.%m.%Y')} ‚Äî {end_date.strftime('%d.%m.%Y')}"
        )

        message = (
            f"üìã *–ó–∞–∫–∞–∑—ã –Ω–∞* | {period_text}\n"
            f"‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
            f"üìå –í—Å–µ–≥–æ: *{total_portions}* –ø–æ—Ä—Ü–∏–π\n\n"
            
            f"‚Ä¢ üè¢ –û—Ñ–∏—Å: *{office_portions}*\n"
            f"‚Ä¢ üè≠ –ü–¶ 1: *{pc1_portions}*\n"
            f"‚Ä¢ üì¶ –°–∫–ª–∞–¥: *{warehouse_portions}*"
        )

        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text=message,
            parse_mode="Markdown"
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ—Ç—á–µ—Ç–∞ –¥–ª—è –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞: {e}", exc_info=True)
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –æ—Ç—á—ë—Ç–∞.")
        raise
    
async def export_accounting_report(
    update: Update,
    context: ContextTypes.DEFAULT_TYPE,
    start_date: Optional[date] = None,
    end_date: Optional[date] = None
):
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –¥–µ—Ç–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –±—É—Ö–≥–∞–ª—Ç–µ—Ä—Å–∫–∏–π –æ—Ç—á–µ—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ Excel.
    
    Args:
        update: –û–±—ä–µ–∫—Ç Update –æ—Ç Telegram.
        context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞.
        start_date: –ù–∞—á–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞ –ø–µ—Ä–∏–æ–¥–∞.
        end_date: –ö–æ–Ω–µ—á–Ω–∞—è –¥–∞—Ç–∞ –ø–µ—Ä–∏–æ–¥–∞.
    
    Returns:
        str: –ü—É—Ç—å –∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–º—É —Ñ–∞–π–ª—É –æ—Ç—á–µ—Ç–∞.
    """
    try:
        reports_dir = ensure_reports_dir('accounting')
        now = datetime.now(TIMEZONE)
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞—Ç
        if not start_date or not end_date:
            start_date = end_date = now.date()
        else:
            start_date = start_date if isinstance(start_date, date) else start_date.date()
            end_date = end_date if isinstance(end_date, date) else end_date.date()

        if start_date > end_date:
            start_date, end_date = end_date, start_date

        # –°–æ–∑–¥–∞–µ–º Excel —Ñ–∞–π–ª
        wb = openpyxl.Workbook()
        
        # 1. –õ–∏—Å—Ç "–î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è"
        ws_detailed = wb.active
        ws_detailed.title = "–î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è"
        detailed_headers = ["–§–ò–û", "–û–±—ä–µ–∫—Ç", "–î–∞—Ç–∞ –∑–∞–∫–∞–∑–∞", "–í—Ä–µ–º—è –∑–∞–∫–∞–∑–∞", "–î–∞—Ç–∞ –æ–±–µ–¥–∞", "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ", "–¢–∏–ø –∑–∞–∫–∞–∑–∞"]
        ws_detailed.append(detailed_headers)
        ws_detailed.auto_filter.ref = "A1:G1"
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ (—Ç–æ–ª—å–∫–æ –Ω–µ–æ—Ç–º–µ–Ω–µ–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã)
        query = '''
            SELECT 
                u.full_name,
                u.location,
                date(o.created_at) as order_date,
                time(o.created_at) as order_time,
                o.target_date,
                o.quantity,
                CASE WHEN o.is_preliminary THEN '–ü—Ä–µ–¥–∑–∞–∫–∞–∑' ELSE '–û–±—ã—á–Ω—ã–π' END
            FROM orders o
            JOIN users u ON o.user_id = u.id
            WHERE o.target_date BETWEEN ? AND ?
              AND o.is_cancelled = FALSE
              AND u.is_deleted = FALSE
            ORDER BY o.target_date, u.full_name
        '''
        db.cursor.execute(query, (start_date.isoformat(), end_date.isoformat()))
        
        total_portions = 0
        orders_count = 0
        for row in db.cursor.fetchall():
            order_date = datetime.strptime(row[2], "%Y-%m-%d").strftime("%d.%m.%Y")
            target_date = datetime.strptime(row[4], "%Y-%m-%d").strftime("%d.%m.%Y")
            ws_detailed.append([
                row[0], row[1], order_date, row[3], target_date, row[5], row[6]
            ])
            total_portions += row[5]
            orders_count += 1

        # 2. –õ–∏—Å—Ç "–°–≤–æ–¥–∫–∞ –ø–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º"
        ws_summary_users = wb.create_sheet("–°–≤–æ–¥–∫–∞ –ø–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º")
        summary_headers = ["–§–ò–û", "–û–±—ä–µ–∫—Ç", "–í—Å–µ–≥–æ –ø–æ—Ä—Ü–∏–π"]
        ws_summary_users.append(summary_headers)
        ws_summary_users.auto_filter.ref = "A1:C1"
        
        db.cursor.execute('''
            SELECT 
                u.full_name,
                u.location,
                SUM(o.quantity)
            FROM orders o
            JOIN users u ON o.user_id = u.id
            WHERE o.target_date BETWEEN ? AND ?
              AND o.is_cancelled = FALSE
            GROUP BY u.full_name, u.location
            ORDER BY SUM(o.quantity) DESC
        ''', (start_date.isoformat(), end_date.isoformat()))
        
        for row in db.cursor.fetchall():
            ws_summary_users.append(row)

        # 3. –õ–∏—Å—Ç "–°–≤–æ–¥–∫–∞ –ø–æ –æ–±—ä–µ–∫—Ç–∞–º"
        ws_summary_locations = wb.create_sheet("–°–≤–æ–¥–∫–∞ –ø–æ –æ–±—ä–µ–∫—Ç–∞–º")
        loc_headers = ["–û–±—ä–µ–∫—Ç", "–ü–æ—Ä—Ü–∏–∏"]
        ws_summary_locations.append(loc_headers)
        ws_summary_locations.auto_filter.ref = "A1:B1"
        
        db.cursor.execute('''
            SELECT u.location, SUM(o.quantity)
            FROM orders o
            JOIN users u ON o.user_id = u.id
            WHERE o.target_date BETWEEN ? AND ?
              AND o.is_cancelled = FALSE
            GROUP BY u.location
            ORDER BY SUM(o.quantity) DESC
        ''', (start_date.isoformat(), end_date.isoformat()))
        
        for row in db.cursor.fetchall():
            ws_summary_locations.append(row)
        ws_summary_locations.append(["–í–°–ï–ì–û", total_portions])

        # 4. –õ–∏—Å—Ç "–ò—Ç–æ–≥–∏"
        ws_stats = wb.create_sheet("–ò—Ç–æ–≥–∏")
        stats_headers = ["–ü–æ–∫–∞–∑–∞—Ç–µ–ª—å", "–ó–Ω–∞—á–µ–Ω–∏–µ"]
        ws_stats.append(stats_headers)
        
        db.cursor.execute('''
            SELECT COUNT(DISTINCT u.id)
            FROM orders o
            JOIN users u ON o.user_id = u.id
            WHERE o.target_date BETWEEN ? AND ?
              AND o.is_cancelled = FALSE
        ''', (start_date.isoformat(), end_date.isoformat()))
        unique_users = db.cursor.fetchone()[0]

        stats_data = [
            ["–ü–µ—Ä–∏–æ–¥", f"{start_date.strftime('%d.%m.%Y')} ‚Äî {end_date.strftime('%d.%m.%Y')}"],
            ["–í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤", orders_count],
            ["–í—Å–µ–≥–æ –ø–æ—Ä—Ü–∏–π", total_portions],
            ["–£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤", unique_users],
            ["–î–∞—Ç–∞ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è", now.strftime("%d.%m.%Y %H:%M")]
        ]
        for row in stats_data:
            ws_stats.append(row)

        # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
        bold_font = Font(bold=True)
        for sheet in wb.worksheets:
            # –ó–∞–≥–æ–ª–æ–≤–∫–∏ –∂–∏—Ä–Ω—ã–º
            for row in sheet.iter_rows(min_row=1, max_row=1):
                for cell in row:
                    cell.font = bold_font
            
            # –ê–≤—Ç–æ–ø–æ–¥–±–æ—Ä —à–∏—Ä–∏–Ω—ã —Å—Ç–æ–ª–±—Ü–æ–≤
            for col in sheet.columns:
                max_length = max(len(str(cell.value)) for cell in col)
                sheet.column_dimensions[col[0].column_letter].width = max_length + 2

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
        timestamp = now.strftime("%Y%m%d_%H%M%S")
        file_name = f"accounting_report_{timestamp}.xlsx"
        file_path = os.path.join(reports_dir, file_name)
        wb.save(file_path)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
        caption = (
            f"üìä –ë—É—Ö–≥–∞–ª—Ç–µ—Ä—Å–∫–∏–π –æ—Ç—á–µ—Ç\n"
            f"üìÖ –ü–µ—Ä–∏–æ–¥: {start_date.strftime('%d.%m.%Y')} ‚Äî {end_date.strftime('%d.%m.%Y')}\n"
            f"üçΩ –í—Å–µ–≥–æ –ø–æ—Ä—Ü–∏–π: {total_portions}\n"
            f"üë• –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤: {unique_users}"
        )

        with open(file_path, 'rb') as file:
            await context.bot.send_document(
                chat_id=update.effective_chat.id,
                document=file,
                caption=caption,
                filename=file_name
            )

        return file_path

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç—á–µ—Ç–∞: {e}", exc_info=True)
        await update.message.reply_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ—Ç—á–µ—Ç–∞. –ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –≤ –ª–æ–≥–∞—Ö."
        )
        raise
    
async def export_monthly_report(
    update: Update,
    context: ContextTypes.DEFAULT_TYPE,
    start_date: Optional[date] = None,
    end_date: Optional[date] = None,
    is_daily: bool = False  # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–ª–∞–≥ –¥–ª—è –¥–Ω–µ–≤–Ω–æ–≥–æ –æ—Ç—á—ë—Ç–∞
):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ–≥–æ –æ—Ç—á—ë—Ç–∞ —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é —É–∫–∞–∑–∞–Ω–∏—è –¥–∞—Ç"""
    try:
        if update.effective_user.id not in CONFIG.admin_ids:
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
            return

        now = datetime.now(TIMEZONE)
        
        # –ï—Å–ª–∏ –¥–∞—Ç—ã –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω—ã - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü
        if not start_date or not end_date:
            month_start = now.replace(day=1).date()
            end_date = now.date()
        else:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ start_date <= end_date
            if start_date > end_date:
                start_date, end_date = end_date, start_date

        reports_dir = ensure_reports_dir('admin')
        
        wb = openpyxl.Workbook()
        
        # –£–¥–∞–ª—è–µ–º –ª–∏—Å—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
        if 'Sheet' in wb.sheetnames:
            del wb['Sheet']
        
        # –°–æ–∑–¥–∞–µ–º –ª–∏—Å—Ç—ã –¥–ª—è –∫–∞–∂–¥–æ–π –ª–æ–∫–∞—Ü–∏–∏
        for location in LOCATIONS:
            ws = wb.create_sheet(location)
            headers = ["–î–∞—Ç–∞ –æ–±–µ–¥–∞", "–°–æ—Ç—Ä—É–¥–Ω–∏–∫", "–¢–µ—Ä—Ä–∏—Ç–æ—Ä–∏–∞–ª—å–Ω—ã–π –ø—Ä–∏–∑–Ω–∞–∫", "–ü–æ–¥–ø–∏—Å—å", "–ö–æ–ª-–≤–æ –æ–±–µ–¥–æ–≤", "–¢–∏–ø –∑–∞–∫–∞–∑–∞"]
            ws.append(headers)
            ws.auto_filter.ref = f"A1:F1"
            
            # –ò–∑–º–µ–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –æ—Ç—á—ë—Ç–∞
            if is_daily:
                # –î–ª—è –¥–Ω–µ–≤–Ω–æ–≥–æ –æ—Ç—á—ë—Ç–∞ –±–µ—Ä—ë–º —Ç–æ–ª—å–∫–æ –æ–¥–Ω—É –¥–∞—Ç—É
                db.cursor.execute('''
                    SELECT 
                        o.target_date,
                        u.full_name,
                        u.location,
                        o.quantity,
                        CASE WHEN o.is_preliminary THEN '–ü—Ä–µ–¥–∑–∞–∫–∞–∑' ELSE '–û–±—ã—á–Ω—ã–π' END
                    FROM orders o
                    JOIN users u ON o.user_id = u.id
                    WHERE o.target_date = ?
                      AND u.location = ?
                      AND o.is_cancelled = FALSE
                      AND u.is_deleted = FALSE
                    ORDER BY u.full_name
                ''', (start_date.isoformat(), location))
            else:
                # –î–ª—è –º–µ—Å—è—á–Ω–æ–≥–æ –æ—Ç—á—ë—Ç–∞ –±–µ—Ä—ë–º –¥–∏–∞–ø–∞–∑–æ–Ω
                db.cursor.execute('''
                    SELECT 
                        o.target_date,
                        u.full_name,
                        u.location,
                        o.quantity,
                        CASE WHEN o.is_preliminary THEN '–ü—Ä–µ–¥–∑–∞–∫–∞–∑' ELSE '–û–±—ã—á–Ω—ã–π' END
                    FROM orders o
                    JOIN users u ON o.user_id = u.id
                    WHERE o.target_date BETWEEN ? AND ?
                      AND u.location = ?
                      AND o.is_cancelled = FALSE
                      AND u.is_deleted = FALSE
                    ORDER BY o.target_date, u.full_name
                ''', (start_date.isoformat(), end_date.isoformat(), location))
            
            for row in db.cursor.fetchall():
                target_date = datetime.strptime(row[0], "%Y-%m-%d").strftime("%d.%m.%Y")
                ws.append([target_date, row[1], row[2], "", row[3], row[4]])  # –ü—É—Å—Ç–∞—è –∫–æ–ª–æ–Ω–∫–∞ –¥–ª—è –ø–æ–¥–ø–∏—Å–∏
        
        # –õ–∏—Å—Ç "–ò—Ç–æ–≥–∏"
        ws_summary = wb.create_sheet("–ò—Ç–æ–≥–∏")
        summary_headers = ["–õ–æ–∫–∞—Ü–∏—è", "–ü–æ—Ä—Ü–∏–∏"]
        ws_summary.append(summary_headers)
        ws_summary.auto_filter.ref = "A1:B1"
        
        # –ê–Ω–∞–ª–æ–≥–∏—á–Ω–æ –º–µ–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –¥–ª—è —Å–≤–æ–¥–∫–∏
        if is_daily:
            db.cursor.execute('''
                SELECT u.location, SUM(o.quantity)
                FROM orders o
                JOIN users u ON o.user_id = u.id
                WHERE o.target_date = ?
                  AND o.is_cancelled = FALSE
                GROUP BY u.location
                ORDER BY SUM(o.quantity) DESC
            ''', (start_date.isoformat(),))
        else:
            db.cursor.execute('''
                SELECT u.location, SUM(o.quantity)
                FROM orders o
                JOIN users u ON o.user_id = u.id
                WHERE o.target_date BETWEEN ? AND ?
                  AND o.is_cancelled = FALSE
                GROUP BY u.location
                ORDER BY SUM(o.quantity) DESC
            ''', (start_date.isoformat(), end_date.isoformat()))
        
        total = 0
        for location, portions in db.cursor.fetchall():
            ws_summary.append([location, portions])
            total += portions
        
        ws_summary.append(["–í–°–ï–ì–û", total])
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
        bold_font = Font(bold=True)
        for sheet in wb.worksheets:
            # –ó–∞–≥–æ–ª–æ–≤–∫–∏ –∂–∏—Ä–Ω—ã–º
            for row in sheet.iter_rows(min_row=1, max_row=1):
                for cell in row:
                    cell.font = bold_font
            
            # –ê–≤—Ç–æ–ø–æ–¥–±–æ—Ä —à–∏—Ä–∏–Ω—ã —Å—Ç–æ–ª–±—Ü–æ–≤
            for col in sheet.columns:
                max_length = max(len(str(cell.value)) for cell in col)
                sheet.column_dimensions[col[0].column_letter].width = max_length + 2

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
        timestamp = now.strftime("%Y%m%d_%H%M%S")
        file_name = f"admin_report_{timestamp}.xlsx"
        file_path = os.path.join(reports_dir, file_name)
        wb.save(file_path)
        
        # –ú–µ–Ω—è–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –æ—Ç—á—ë—Ç–∞
        if is_daily:
            caption = (
                f"üìÖ –ê–¥–º–∏–Ω –æ—Ç—á–µ—Ç –∑–∞ {start_date.strftime('%d.%m.%Y')}\n"
                f"üçΩ –í—Å–µ–≥–æ –ø–æ—Ä—Ü–∏–π: {total}"
            )
        else:
            caption = (
                f"üìÖ –ê–¥–º–∏–Ω –æ—Ç—á–µ—Ç –∑–∞ {start_date.strftime('%B %Y')}\n"
                f"üçΩ –í—Å–µ–≥–æ –ø–æ—Ä—Ü–∏–π: {total}"
            )
        
        with open(file_path, 'rb') as file:
            await context.bot.send_document(
                chat_id=update.effective_chat.id,
                document=file,
                caption=caption,
                filename=file_name
            )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –∞–¥–º–∏–Ω –æ—Ç—á—ë—Ç–∞: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç—á—ë—Ç–∞")
        
async def export_daily_admin_report(
    update: Update, 
    context: ContextTypes.DEFAULT_TYPE, 
    target_date: Optional[date] = None
):
    """–§–æ—Ä–º–∏—Ä—É–µ—Ç –¥–Ω–µ–≤–Ω–æ–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–π –æ—Ç—á–µ—Ç"""
    logger.info(f"–°–æ–∑–¥–∞–Ω–∏–µ –¥–Ω–µ–≤–Ω–æ–≥–æ –∞–¥–º–∏–Ω –æ—Ç—á–µ—Ç–∞, –¥–∞—Ç–∞: {target_date}")
    if not target_date:
        target_date = datetime.now(TIMEZONE).date()
    return await export_monthly_report(
        update, 
        context, 
        target_date, 
        target_date,
        is_daily=True  # –ü–µ—Ä–µ–¥–∞—ë–º —Ñ–ª–∞–≥, —á—Ç–æ —ç—Ç–æ –¥–Ω–µ–≤–Ω–æ–π –æ—Ç—á—ë—Ç
    )
    
async def export_daily_orders_for_provider(update: Update, context: ContextTypes.DEFAULT_TYPE, target_date: Optional[date] = None):
    """–§–æ—Ä–º–∏—Ä—É–µ—Ç –¥–Ω–µ–≤–Ω–æ–π –æ—Ç—á–µ—Ç –¥–ª—è –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤"""
    logger.info(f"–°–æ–∑–¥–∞–Ω–∏–µ –¥–Ω–µ–≤–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ –¥–ª—è –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞, –¥–∞—Ç–∞: {target_date}")
    if not target_date:
        target_date = datetime.now(TIMEZONE).date()
    return await export_orders_for_provider(update, context, target_date, target_date)