# ##handlers/menu_handlers.py
import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import ContextTypes
from datetime import datetime, timedelta, date

from bot_keyboards import create_main_menu_keyboard
from db import CONFIG
from constants import SELECT_MONTH_RANGE_STATS
from db import db
from handlers.common import show_main_menu
from handlers.common_handlers import view_orders
from utils import can_modify_order, check_registration, format_menu, handle_unregistered
from view_utils import refresh_orders_view


logger = logging.getLogger(__name__)

async def show_today_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –º–µ–Ω—é –Ω–∞ —Ç–µ–∫—É—â–∏–π –¥–µ–Ω—å —Å —É—á–µ—Ç–æ–º –ø—Ä–∞–∑–¥–Ω–∏–∫–æ–≤"""
    user_id = update.effective_user.id
    now = datetime.now(CONFIG.timezone)
    today = now.date()
    days_ru = ["–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "–í—Ç–æ—Ä–Ω–∏–∫", "–°—Ä–µ–¥–∞", "–ß–µ—Ç–≤–µ—Ä–≥", "–ü—è—Ç–Ω–∏—Ü–∞", "–°—É–±–±–æ—Ç–∞", "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"]
    day_name = days_ru[today.weekday()]
    date_str = today.strftime("%d.%m")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–∑–¥–Ω–∏–∫
    holiday_name = CONFIG.holidays.get(today.isoformat())
    if holiday_name:
        await update.message.reply_text(f"üéâ –°–µ–≥–æ–¥–Ω—è ({date_str}) –ø—Ä–∞–∑–¥–Ω–∏–∫ - {holiday_name}! –ú–µ–Ω—é –Ω–µ –ø—Ä–µ–¥—É—Å–º–æ—Ç—Ä–µ–Ω–æ.")
        return await show_main_menu(update, user_id)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—ã—Ö–æ–¥–Ω–æ–π
    if today.weekday() >= 5:
        await update.message.reply_text(f"‚è≥ –°–µ–≥–æ–¥–Ω—è ({day_name}, {date_str}) –≤—ã—Ö–æ–¥–Ω–æ–π! –ú–µ–Ω—é –Ω–µ –ø—Ä–µ–¥—É—Å–º–æ—Ç—Ä–µ–Ω–æ.")
        return await show_main_menu(update, user_id)
    
    menu = CONFIG.menu.get(day_name)
    if not menu:
        await update.message.reply_text(f"‚è≥ –ù–∞ —Å–µ–≥–æ–¥–Ω—è ({date_str}) –º–µ–Ω—é –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ.")
        return await show_main_menu(update, user_id)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    message = f"üçΩ –ú–µ–Ω—é –Ω–∞ {day_name} ({date_str}):\n"
    message += f"1. üç≤ –ü–µ—Ä–≤–æ–µ: {menu['first']}\n"
    message += f"2. üçõ –û—Å–Ω–æ–≤–Ω–æ–µ –±–ª—é–¥–æ: {menu['main']}\n"
    message += f"3. ü•ó –°–∞–ª–∞—Ç: {menu['salad']}"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω—ã–π –∑–∞–∫–∞–∑
    db.cursor.execute(
        "SELECT quantity FROM orders WHERE user_id = "
        "(SELECT id FROM users WHERE telegram_id = ?) AND target_date = ? AND is_cancelled = FALSE",
        (user_id, today.isoformat())
    )
    has_active_order = db.cursor.fetchone() is not None

    can_modify = can_modify_order(today)
    
    keyboard = []
    if not CONFIG.orders_enabled:
        # –ó–∞–∫–∞–∑—ã –æ—Ç–∫–ª—é—á–µ–Ω—ã –≥–ª–æ–±–∞–ª—å–Ω–æ
        message += "\n\n‚ö†Ô∏è –ü—Ä–∏—ë–º –∑–∞–∫–∞–∑–æ–≤ –≤—Ä–µ–º–µ–Ω–Ω–æ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
        keyboard.append([InlineKeyboardButton("‚è≥ –ó–∞–∫–∞–∑—ã –ø—Ä–∏–Ω–∏–º–∞—é—Ç—Å—è —á–µ—Ä–µ–∑ –ë–∏—Ç—Ä–∏–∫—Å", callback_data="noop")])
    elif has_active_order:
        # –ó–∞–º–µ–Ω–∏—Ç–µ —Å—Ç—Ä–æ–∫—É —Å –æ—à–∏–±–∫–æ–π –Ω–∞:
        db.cursor.execute("""
            SELECT quantity FROM orders 
            WHERE user_id = ? AND target_date = ? AND is_cancelled = FALSE
        """, (user_id, today.isoformat()))
        order = db.cursor.fetchone()
        message += f"\n\n‚úÖ –ó–∞–∫–∞–∑: {order[0]} –ø–æ—Ä—Ü–∏–∏" if order else "\n\nüõí –ó–∞–∫–∞–∑: –Ω–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω"
        if can_modify:
            keyboard.append([InlineKeyboardButton("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ", callback_data="change_0")])
            keyboard.append([InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑", callback_data="cancel_0")])
        else:
            keyboard.append([InlineKeyboardButton("‚ÑπÔ∏è –ó–∞–∫–∞–∑ –æ—Ñ–æ—Ä–º–ª–µ–Ω (–∏–∑–º–µ–Ω–µ–Ω–∏–µ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ)", callback_data="noop")])
    else:
        # –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞
        if can_modify:
            keyboard.append([InlineKeyboardButton("‚úÖ –ó–∞–∫–∞–∑–∞—Ç—å", callback_data="order_0")])
        else:
            keyboard.append([InlineKeyboardButton("‚è≥ –í—Ä–µ–º—è –¥–ª—è –∑–∞–∫–∞–∑–æ–≤ –∏—Å—Ç–µ–∫–ª–æ", callback_data="noop")])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(message, reply_markup=reply_markup)
    return await show_main_menu(update, user_id)

async def show_week_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –º–µ–Ω—é –Ω–∞ –≤—Å—é –Ω–µ–¥–µ–ª—é (7 –¥–Ω–µ–π) —Å —É—á–µ—Ç–æ–º –≤—ã—Ö–æ–¥–Ω—ã—Ö –∏ –ø—Ä–∞–∑–¥–Ω–∏–∫–æ–≤.
    –î–ª—è –∫–∞–∂–¥–æ–≥–æ –¥–Ω—è –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç:
    - –°–æ—Å—Ç–∞–≤ –º–µ–Ω—é
    - –°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–µ—Å–ª–∏ –µ—Å—Ç—å)
    - –ö–Ω–æ–ø–∫–∏ –¥–ª—è –∑–∞–∫–∞–∑–∞/–∏–∑–º–µ–Ω–µ–Ω–∏—è (–µ—Å–ª–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ —Ä–∞–º–∫–∞–º–∏)
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–ª—É—á–∞–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –º–µ–Ω—é –Ω–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ –¥–Ω–∏.
    """
    try:
        user = update.effective_user
        now = datetime.now(CONFIG.timezone)
        today = now.date()
        days_ru = ["–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "–í—Ç–æ—Ä–Ω–∏–∫", "–°—Ä–µ–¥–∞", "–ß–µ—Ç–≤–µ—Ä–≥", "–ü—è—Ç–Ω–∏—Ü–∞", "–°—É–±–±–æ—Ç–∞", "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"]
        
        sent_days = 0
        
        for day_offset in range(7):
            day_date = today + timedelta(days=day_offset)
            day_name = days_ru[day_date.weekday()]
            date_str = day_date.strftime("%d.%m")
            date_iso = day_date.isoformat()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–∑–¥–Ω–∏–∫–∏
            holiday_name = CONFIG.holidays.get(date_iso)
            if holiday_name:
                await update.message.reply_text(
                    f"üéâ {day_name} ({date_str}) ‚Äî {holiday_name}! –ú–µ–Ω—é –Ω–µ –ø—Ä–µ–¥—É—Å–º–æ—Ç—Ä–µ–Ω–æ."
                )
                continue
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—ã—Ö–æ–¥–Ω—ã–µ
            if day_date.weekday() >= 5:
                await update.message.reply_text(
                    f"‚è≥ {day_name} ({date_str}) ‚Äî –í—ã—Ö–æ–¥–Ω–æ–π! –ú–µ–Ω—é –Ω–µ –ø—Ä–µ–¥—É—Å–º–æ—Ç—Ä–µ–Ω–æ."
                )
                continue
            
            menu = CONFIG.menu.get(day_name)
            if not menu:
                logger.warning(f"–ú–µ–Ω—é –¥–ª—è {day_name} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                continue
            
            menu_text = f"üçΩ –ú–µ–Ω—é –Ω–∞ {day_name} ({date_str}):\n"
            menu_text += f"1. üç≤ –ü–µ—Ä–≤–æ–µ: {menu['first']}\n"
            menu_text += f"2. üçõ –û—Å–Ω–æ–≤–Ω–æ–µ –±–ª—é–¥–æ: {menu['main']}\n"
            menu_text += f"3. ü•ó –°–∞–ª–∞—Ç: {menu['salad']}"
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–∫–∞–∑–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            db.cursor.execute("""
                SELECT quantity FROM orders 
                WHERE user_id = (SELECT id FROM users WHERE telegram_id = ?)
                AND target_date = ?
                AND is_cancelled = FALSE
            """, (user.id, date_iso))
            order = db.cursor.fetchone()
            
            keyboard = []
            if not CONFIG.orders_enabled:
                # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—É—é –∫–Ω–æ–ø–∫—É, –µ—Å–ª–∏ –∑–∞–∫–∞–∑—ã –æ—Ç–∫–ª—é—á–µ–Ω—ã
                menu_text += "\n\n‚ö†Ô∏è –ü—Ä–∏—ë–º –∑–∞–∫–∞–∑–æ–≤ –≤—Ä–µ–º–µ–Ω–Ω–æ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
                keyboard.append([InlineKeyboardButton("‚è≥ –ó–∞–∫–∞–∑—ã –ø—Ä–∏–Ω–∏–º–∞—é—Ç—Å—è —á–µ—Ä–µ–∑ –ë–∏—Ç—Ä–∏–∫—Å", callback_data="noop")])
            else:
                # –õ–æ–≥–∏–∫–∞ –¥–ª—è –≤–∫–ª—é—á–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤
                if order:
                    menu_text += f"\n‚úÖ –ó–∞–∫–∞–∑: {order[0]} –ø–æ—Ä—Ü–∏–∏"
                    if can_modify_order(day_date):
                        keyboard.append([InlineKeyboardButton("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å", callback_data=f"change_{day_offset}")])
                elif can_modify_order(day_date):
                    keyboard.append([InlineKeyboardButton("‚úÖ –ó–∞–∫–∞–∑–∞—Ç—å", callback_data=f"order_{day_offset}")])

            await update.message.reply_text(
                menu_text,
                reply_markup=InlineKeyboardMarkup(keyboard) if keyboard else None,
                parse_mode="Markdown"
            )
            sent_days += 1
        
        if sent_days == 0:
            await update.message.reply_text("‚ÑπÔ∏è –ù–∞ —ç—Ç—É –Ω–µ–¥–µ–ª—é –º–µ–Ω—é –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ")
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ show_week_menu: {e}", exc_info=True)
        await update.message.reply_text(
            "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–µ–Ω—é. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=create_main_menu_keyboard(user.id)
        )
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ show_week_menu: {e}", exc_info=True)
        # from bot_keyboards import create_main_menu_keyboard  # –î–æ–±–∞–≤–ª—è–µ–º –∏–º–ø–æ—Ä—Ç
        await update.message.reply_text(
            "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–µ–Ω—é. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=create_main_menu_keyboard(user.id)
        )
        
async def show_day_menu(update: Update, context: ContextTypes.DEFAULT_TYPE, day_offset=0):
    """
    –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –º–µ–Ω—é –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –¥–µ–Ω—å (—Å–µ–≥–æ–¥–Ω—è/–∑–∞–≤—Ç—Ä–∞/–¥—Ä—É–≥–æ–π –¥–µ–Ω—å).
    –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
    - day_offset: —Å–º–µ—â–µ–Ω–∏–µ –≤ –¥–Ω—è—Ö –æ—Ç —Ç–µ–∫—É—â–µ–π –¥–∞—Ç—ã (0 - —Å–µ–≥–æ–¥–Ω—è, 1 - –∑–∞–≤—Ç—Ä–∞ –∏ —Ç.–¥.)
    –§–æ—Ä–º–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å:
    - –ü–æ–¥—Ä–æ–±–Ω—ã–º –æ–ø–∏—Å–∞–Ω–∏–µ–º –º–µ–Ω—é
    - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ç–µ–∫—É—â–µ–º –∑–∞–∫–∞–∑–µ (–µ—Å–ª–∏ –µ—Å—Ç—å)
    - –ö–Ω–æ–ø–∫–∞–º–∏ –¥–µ–π—Å—Ç–≤–∏–π (–∑–∞–∫–∞–∑/–∏–∑–º–µ–Ω–µ–Ω–∏–µ/–æ—Ç–º–µ–Ω–∞)
    """
    try:
        user = update.effective_user
        now = datetime.now(CONFIG.timezone)
        days_ru = ["–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "–í—Ç–æ—Ä–Ω–∏–∫", "–°—Ä–µ–¥–∞", "–ß–µ—Ç–≤–µ—Ä–≥", "–ü—è—Ç–Ω–∏—Ü–∞", "–°—É–±–±–æ—Ç–∞", "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"]
        target_date = now.date() + timedelta(days=day_offset)
        day_name = days_ru[target_date.weekday()]
        date_iso = target_date.isoformat()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–∑–¥–Ω–∏–∫
        if holiday_name := CONFIG.holidays.get(date_iso):
            await update.message.reply_text(f"üéâ {day_name} ({target_date.strftime('%d.%m')}) ‚Äî {holiday_name}! –ú–µ–Ω—é –Ω–µ –ø—Ä–µ–¥—É—Å–º–æ—Ç—Ä–µ–Ω–æ.")
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—ã—Ö–æ–¥–Ω–æ–π
        if target_date.weekday() >= 5:
            await update.message.reply_text(f"‚è≥ {day_name} ({target_date.strftime('%d.%m')}) ‚Äî –í—ã—Ö–æ–¥–Ω–æ–π! –ú–µ–Ω—é –Ω–µ –ø—Ä–µ–¥—É—Å–º–æ—Ç—Ä–µ–Ω–æ.")
            return

        # –ü–æ–ª—É—á–∞–µ–º –º–µ–Ω—é
        if not (menu := CONFIG.menu.get(day_name)):
            await update.message.reply_text(f"‚è≥ –ù–∞ {day_name} –º–µ–Ω—é –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ")
            return

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        message = format_menu(menu, day_name, is_tomorrow=day_offset == 1)

        # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if not (user_record := db.cursor.execute("SELECT id FROM users WHERE telegram_id = ?", (user.id,)).fetchone()):
            await update.message.reply_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        user_db_id = user_record[0]

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∑–∞–∫–∞–∑
        order = db.cursor.execute("""
            SELECT quantity FROM orders 
            WHERE user_id = ? AND target_date = ? AND is_cancelled = FALSE
        """, (user_db_id, date_iso)).fetchone()

        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        keyboard = []
        if not CONFIG.orders_enabled:
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—É—é –∫–Ω–æ–ø–∫—É, –µ—Å–ª–∏ –∑–∞–∫–∞–∑—ã –æ—Ç–∫–ª—é—á–µ–Ω—ã
            message += "\n\n‚ö†Ô∏è –ü—Ä–∏—ë–º –∑–∞–∫–∞–∑–æ–≤ –≤—Ä–µ–º–µ–Ω–Ω–æ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
            keyboard.append([InlineKeyboardButton("‚è≥ –ó–∞–∫–∞–∑—ã –ø—Ä–∏–Ω–∏–º–∞—é—Ç—Å—è —á–µ—Ä–µ–∑ –ë–∏—Ç—Ä–∏–∫—Å", callback_data="noop")])
        else:
            # –°—É—â–µ—Å—Ç–≤—É—é—â–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è –≤–∫–ª—é—á–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤
            can_modify = can_modify_order(target_date)
            if order:  # –ï—Å–ª–∏ –∑–∞–∫–∞–∑ —É–∂–µ –µ—Å—Ç—å
                message += f"\n\n‚úÖ {'–ü—Ä–µ–¥–∑–∞–∫–∞–∑' if day_offset > 0 else '–ó–∞–∫–∞–∑'}: {order[0]} –ø–æ—Ä—Ü–∏–∏"
                if can_modify:
                    keyboard.append([InlineKeyboardButton("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ", callback_data=f"change_{day_offset}")])
                keyboard.append([InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑", callback_data=f"cancel_{day_offset}")])
            else:  # –ï—Å–ª–∏ –∑–∞–∫–∞–∑–∞ –Ω–µ—Ç
                if can_modify:
                    keyboard.append([InlineKeyboardButton("‚úÖ –ó–∞–∫–∞–∑–∞—Ç—å", callback_data=f"order_{day_offset}")])
                else:
                    keyboard.append([InlineKeyboardButton("‚è≥ –í—Ä–µ–º—è –¥–ª—è –∑–∞–∫–∞–∑–æ–≤ –∏—Å—Ç–µ–∫–ª–æ", callback_data="noop")])
        
        await update.message.reply_text(
            message,
            reply_markup=InlineKeyboardMarkup(keyboard) if keyboard else None,
            parse_mode="Markdown"
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ show_day_menu: {e}", exc_info=True)
        await update.message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–µ–Ω—é")

async def order_action(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–µ–π—Å—Ç–≤–∏–π —Å –∑–∞–∫–∞–∑–∞–º–∏. –†–∞–∑–±–∏—Ä–∞–µ—Ç callback-–∑–∞–ø—Ä–æ—Å—ã –∏:
    - –û—Ç–º–µ–Ω—è–µ—Ç –∑–∞–∫–∞–∑—ã (–ø—Ä–æ–≤–µ—Ä—è—è –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è)
    - –ò–∑–º–µ–Ω—è–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ä—Ü–∏–π (–∑–∞–≥–ª—É—à–∫–∞)
    - –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç –∑–∞–∫–∞–∑—ã (–∑–∞–≥–ª—É—à–∫–∞)
    –û–±–Ω–æ–≤–ª—è–µ—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –ø–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏–π.
    """
    try:
        query = update.callback_query
        await query.answer()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É
        if not CONFIG.orders_enabled and query.data.startswith(('order_', 'change_', 'confirm_')):
            await query.answer("‚ùå –ü—Ä–∏—ë–º –∑–∞–∫–∞–∑–æ–≤ –≤—Ä–µ–º–µ–Ω–Ω–æ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω", show_alert=True)
            return

        logger.info(f"–ü–æ–ª—É—á–µ–Ω callback: {query.data} –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {query.from_user.id}")

        if query.data.startswith("cancel_"):
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞—Ç—É –∏–∑ callback_data
            try:
                _, date_part = query.data.split("_", 1)

                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–∞—Ç—É
                now = datetime.now(CONFIG.timezone)
                if '-' in date_part:
                    target_date = datetime.strptime(date_part, "%Y-%m-%d").date()
                elif date_part.isdigit():
                    day_offset = int(date_part)
                    target_date = (now + timedelta(days=day_offset)).date()
                else:
                    raise ValueError(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã: {date_part}")

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –æ—Ç–º–µ–Ω—ã
                if not can_modify_order(target_date):
                    await query.answer("‚ÑπÔ∏è –û—Ç–º–µ–Ω–∞ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞ –ø–æ—Å–ª–µ 9:30", show_alert=True)
                    return

                # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î
                db.cursor.execute("SELECT id FROM users WHERE telegram_id = ?", (query.from_user.id,))
                user_record = db.cursor.fetchone()
                if not user_record:
                    await query.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
                    return

                user_db_id = user_record[0]

                # –û—Ç–º–µ–Ω—è–µ–º –∑–∞–∫–∞–∑ –≤ –ë–î
                with db.conn:
                    db.cursor.execute("""
                        UPDATE orders 
                        SET is_cancelled = TRUE,
                            order_time = ?
                        WHERE user_id = ?
                          AND target_date = ?
                          AND is_cancelled = FALSE
                    """, (now.strftime("%H:%M:%S"), user_db_id, target_date.isoformat()))

                    if db.cursor.rowcount == 0:
                        await query.answer("‚ùå –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
                        return

                # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
                days_ru = ["–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "–í—Ç–æ—Ä–Ω–∏–∫", "–°—Ä–µ–¥–∞", "–ß–µ—Ç–≤–µ—Ä–≥", "–ü—è—Ç–Ω–∏—Ü–∞", "–°—É–±–±–æ—Ç–∞", "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"]
                if "–ú–µ–Ω—é –Ω–∞" in query.message.text:
                    # –û—Ç–º–µ–Ω–∞ –∏–∑ –º–µ–Ω—é –¥–Ω—è
                    day_name = days_ru[target_date.weekday()]
                    menu = CONFIG.menu.get(day_name)
                    await query.edit_message_text(
                        text=f"~~{format_menu(menu, day_name)}~~\n‚ùå –ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω—ë–Ω",
                        reply_markup=InlineKeyboardMarkup([
                            [InlineKeyboardButton("‚úÖ –ó–∞–∫–∞–∑–∞—Ç—å", callback_data=f"order_{target_date.isoformat()}")]
                        ]),
                        parse_mode="Markdown"
                    )
                else:
                    # –û—Ç–º–µ–Ω–∞ –∏–∑ —Å–ø–∏—Å–∫–∞ –∑–∞–∫–∞–∑–æ–≤
                    await refresh_orders_view(query, context, query.from_user.id, now, days_ru)

                await query.answer("‚úÖ –ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω—ë–Ω")

            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –∑–∞–∫–∞–∑–∞: {e}")
                await query.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã", show_alert=True)

        elif query.data.startswith("change_"):
            # –õ–æ–≥–∏–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ—Ä—Ü–∏–π (–∑–∞–≥–ª—É—à–∫–∞)
            await query.answer("üîÑ –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ—Ä—Ü–∏–π –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ")
            return

        elif query.data.startswith("confirm_"):
            # –õ–æ–≥–∏–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ (–∑–∞–≥–ª—É—à–∫–∞)
            await query.answer("‚úÖ –ó–∞–∫–∞–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω")
            return

        else:
            # –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ
            logger.warning(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π callback: {query.data}")
            await query.answer("‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ", show_alert=True)

    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ order_action: {e}", exc_info=True)
        await query.answer("‚ö†Ô∏è –°–µ—Ä–≤–µ—Ä–Ω–∞—è –æ—à–∏–±–∫–∞", show_alert=True)

async def monthly_stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –ò–Ω–∏—Ü–∏–∏—Ä—É–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞–∫–∞–∑–æ–≤.
    –ü—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤—ã–±—Ä–∞—Ç—å –ø–µ—Ä–∏–æ–¥ (—Ç–µ–∫—É—â–∏–π/–ø—Ä–æ—à–ª—ã–π –º–µ—Å—è—Ü)
    –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤—ã–±–æ—Ä–∞.
    """
    try:
        user = update.effective_user
        reply_markup = ReplyKeyboardMarkup(
            [["–¢–µ–∫—É—â–∏–π –º–µ—Å—è—Ü", "–ü—Ä–æ—à–ª—ã–π –º–µ—Å—è—Ü"], ["–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]],
            resize_keyboard=True,
            one_time_keyboard=True
        )
        await update.message.reply_text(
            "üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Å—è—Ü –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:",
            reply_markup=reply_markup
        )
        return SELECT_MONTH_RANGE_STATS
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ monthly_stats: {e}")
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return await show_main_menu(update, user.id)

async def monthly_stats_selected(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ–º –Ω–∞:
    - ‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ (–∑–∞–∫–∞–∑—ã, –¥–∞—Ç–∞ –∫–æ—Ç–æ—Ä—ã—Ö —É–∂–µ –ø—Ä–æ—à–ª–∞)
    - ‚è≥ –ü—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ (–±—É–¥—É—â–∏–µ –∑–∞–∫–∞–∑—ã, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–Ω–æ –æ—Ç–º–µ–Ω–∏—Ç—å)
    - ‚ùå –û—Ç–º–µ–Ω–µ–Ω–Ω—ã–µ (–ø–æ –∂–µ–ª–∞–Ω–∏—é)
    """
    try:
        user = update.effective_user
        text = update.message.text.strip()
        today = datetime.now(CONFIG.timezone).date()

        if text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
            return await show_main_menu(update, user.id)

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–µ—Ä–∏–æ–¥
        if text == "–¢–µ–∫—É—â–∏–π –º–µ—Å—è—Ü":
            start_date = today.replace(day=1)
            month_name = start_date.strftime("%B %Y")
        elif text == "–ü—Ä–æ—à–ª—ã–π –º–µ—Å—è—Ü":
            start_date = (today.replace(day=1) - timedelta(days=1)).replace(day=1)
            month_name = start_date.strftime("%B %Y")
        else:
            await update.message.reply_text("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–µ—Ä–∏–æ–¥.")
            return SELECT_MONTH_RANGE_STATS

        end_date = (start_date + timedelta(days=32)).replace(day=1) - timedelta(days=1)

        # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        db.cursor.execute("SELECT id FROM users WHERE telegram_id = ?", (user.id,))
        user_record = db.cursor.fetchone()
        if not user_record:
            await update.message.reply_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return await show_main_menu(update, user.id)

        user_db_id = user_record[0]

        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        db.cursor.execute("""
            SELECT 
                -- –í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã (–¥–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ + –Ω–µ –æ—Ç–º–µ–Ω–µ–Ω—ã)
                SUM(CASE WHEN target_date < ? AND is_cancelled = FALSE THEN quantity ELSE 0 END) as completed,
                
                -- –ü—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ –∑–∞–∫–∞–∑—ã (–¥–∞—Ç–∞ –≤ –±—É–¥—É—â–µ–º + –Ω–µ –æ—Ç–º–µ–Ω–µ–Ω—ã)
                SUM(CASE WHEN target_date >= ? AND is_cancelled = FALSE THEN quantity ELSE 0 END) as upcoming,
                
                -- –û—Ç–º–µ–Ω–µ–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã
                SUM(CASE WHEN is_cancelled = TRUE THEN quantity ELSE 0 END) as cancelled
            FROM orders
            WHERE user_id = ?
              AND target_date BETWEEN ? AND ?
        """, (today, today, user_db_id, start_date.isoformat(), end_date.isoformat()))

        stats = db.cursor.fetchone()
        completed = stats[0] or 0
        upcoming = stats[1] or 0
        cancelled = stats[2] or 0

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        message_lines = [
            f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ {month_name}:",
            f"‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ",
            f"üçΩ –í—Å–µ–≥–æ –ø–æ—Ä—Ü–∏–π: *{completed + upcoming}*",
            "",
            f"‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ: *{completed}*",
            f"‚è≥ –ü—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ: *{upcoming}*"
        ]

        if cancelled > 0:
            message_lines.append(f"‚ùå –û—Ç–º–µ–Ω–µ–Ω–Ω—ã–µ: *{cancelled}*")

        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö –∑–∞–∫–∞–∑–∞—Ö
        if upcoming > 0:
            db.cursor.execute("""
                SELECT COUNT(*) 
                FROM orders 
                WHERE user_id = ? 
                  AND target_date >= ? 
                  AND is_cancelled = FALSE
            """, (user_db_id, today))
            order_count = db.cursor.fetchone()[0]
            
            next_order_date = None
            db.cursor.execute("""
                SELECT MIN(target_date)
                FROM orders
                WHERE user_id = ?
                  AND target_date >= ?
                  AND is_cancelled = FALSE
            """, (user_db_id, today))
            next_date = db.cursor.fetchone()[0]
            
            if next_date:
                next_order_date = datetime.strptime(next_date, "%Y-%m-%d").strftime("%d.%m.%Y")
                message_lines.extend([
                    "",
                    f"–ë–ª–∏–∂–∞–π—à–∏–π –∑–∞–∫–∞–∑: *{next_order_date}*",
                    f"–í—Å–µ–≥–æ –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö –¥–Ω–µ–π —Å –∑–∞–∫–∞–∑–∞–º–∏: *{order_count}*"
                ])

        await update.message.reply_text(
            "\n".join(message_lines),
            parse_mode="Markdown"
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}", exc_info=True)
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.")

    return await show_main_menu(update, user.id)
    
async def handle_order_confirmation(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞.
    –°–æ–∑–¥–∞–µ—Ç –∑–∞–ø–∏—Å—å –≤ –ë–î —Å —Ñ–ª–∞–≥–æ–º is_preliminary=True.
    –û—Å–æ–±—ã–µ —Å–ª—É—á–∞–∏:
    - –í –ø—è—Ç–Ω–∏—Ü—É –∑–∞–∫–∞–∑ —Å–æ–∑–¥–∞–µ—Ç—Å—è –Ω–∞ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫
    - –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –æ—Ç–≤–µ—Ç–µ "–î–∞"
    """
    try:
        text = update.message.text
        user = update.effective_user
        
        if text == "–î–∞":
            now = datetime.now(CONFIG.timezone)
            target_date = now + timedelta(days=1)
            if now.weekday() == 4:  # –ü—è—Ç–Ω–∏—Ü–∞ -> –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫
                target_date += timedelta(days=2)
            
            db.cursor.execute(
                "INSERT INTO orders (user_id, target_date, order_time, quantity, is_preliminary) "
                "SELECT id, ?, ?, 1, TRUE FROM users WHERE telegram_id = ?",
                (target_date.date().isoformat(), now.strftime("%H:%M:%S"), user.id)
            )
            db.conn.commit()
            await update.message.reply_text(f"‚úÖ –ü—Ä–µ–¥–∑–∞–∫–∞–∑ –Ω–∞ {target_date.strftime('%d.%m')} –æ—Ñ–æ—Ä–º–ª–µ–Ω!")
        else:
            await update.message.reply_text("‚ùå –ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω.")
        
        return await show_main_menu(update, user.id)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_order_confirmation: {e}")
        await update.message.reply_text("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return await show_main_menu(update, user.id)

async def handle_cancel_from_view(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–º–µ–Ω—É –∑–∞–∫–∞–∑–∞ –∏–∑ —Å–ø–∏—Å–∫–∞ –∑–∞–∫–∞–∑–æ–≤.
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –æ—Ç–º–µ–Ω—ã (–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è),
    –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å –≤ –ë–î –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Å–ø–∏—Å–∫–∞ –∑–∞–∫–∞–∑–æ–≤.
    """
    query = update.callback_query
    await query.answer()
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞—Ç—É –∏–∑ callback_data
        target_date_str = query.data.split('_')[-1]
        target_date = datetime.strptime(target_date_str, "%Y-%m-%d").date()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –æ—Ç–º–µ–Ω—ã
        if not can_modify_order(target_date):
            await query.answer("‚ÑπÔ∏è –û—Ç–º–µ–Ω–∞ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞ –ø–æ—Å–ª–µ 9:30", show_alert=True)
            return

        # –û—Ç–º–µ–Ω—è–µ–º –∑–∞–∫–∞–∑
        user_id = query.from_user.id
        now = datetime.now(CONFIG.timezone)
        
        db.cursor.execute("""
            UPDATE orders
            SET is_cancelled = TRUE,
                order_time = ?
            WHERE user_id = (SELECT id FROM users WHERE telegram_id = ?)
            AND target_date = ?
            AND is_cancelled = FALSE
        """, (now.isoformat(), user_id, target_date_str))
        db.conn.commit()

        if db.cursor.rowcount == 0:
            await query.answer("‚ùå –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É–∂–µ –æ—Ç–º–µ–Ω–µ–Ω", show_alert=True)
            return

        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ—Ç–º–µ–Ω–∏–ª –∑–∞–∫–∞–∑ –Ω–∞ {target_date_str}")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤
        await view_orders(update, context, is_cancellation=True)
        await query.answer(f"‚úÖ –ó–∞–∫–∞–∑ –Ω–∞ {target_date.strftime('%d.%m')} –æ—Ç–º–µ–Ω—ë–Ω")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –∑–∞–∫–∞–∑–∞: {e}")
        await query.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –∑–∞–∫–∞–∑–∞", show_alert=True)
