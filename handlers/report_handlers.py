# ##handlers/report_handlers.py
import logging
from datetime import date, datetime, timedelta
from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import ContextTypes
import matplotlib

matplotlib.use('Agg')

from db import CONFIG
from constants import SELECT_MONTH_RANGE
from handlers.common import show_main_menu
from report_generators import export_accounting_report, export_daily_admin_report, export_monthly_report, export_orders_for_provider

logger = logging.getLogger(__name__)

# async def handle_report_request(update: Update, context: ContextTypes.DEFAULT_TYPE):
#     """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–ø—Ä–æ—Å–æ–≤ –æ—Ç—á–µ—Ç–æ–≤"""
#     from admin import export_orders_for_provider, export_accounting_report, export_monthly_report
#     user_id = update.effective_user.id
#     text = update.message.text
    
#     if text == "üìä –û—Ç—á–µ—Ç –∑–∞ –¥–µ–Ω—å":
#         today = datetime.now(TIMEZONE).date()
#         await generate_report(update, context, user_id, today, today)
#     elif text == "üìÖ –û—Ç—á–µ—Ç –∑–∞ –º–µ—Å—è—Ü":
#         await update.message.reply_text(
#             "–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥:",
#             reply_markup=ReplyKeyboardMarkup([
#                 ["–¢–µ–∫—É—â–∏–π –º–µ—Å—è—Ü", "–ü—Ä–æ—à–ª—ã–π –º–µ—Å—è—Ü"],
#                 ["–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]
#             ], resize_keyboard=True)
#         )
#         return SELECT_MONTH_RANGE

async def generate_report(update: Update, context: ContextTypes.DEFAULT_TYPE, 
                         user_id: int, start_date: date, end_date: date):
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç—á–µ—Ç—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:
    - –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã: –ø–æ–ª–Ω—ã–π –º–µ—Å—è—á–Ω—ã–π –æ—Ç—á–µ—Ç (export_monthly_report)
    - –ë—É—Ö–≥–∞–ª—Ç–µ—Ä—ã: –±—É—Ö–≥–∞–ª—Ç–µ—Ä—Å–∫–∏–π –æ—Ç—á–µ—Ç (export_accounting_report)
    - –ü–æ—Å—Ç–∞–≤—â–∏–∫–∏: –æ—Ç—á–µ—Ç –ø–æ –∑–∞–∫–∞–∑–∞–º (export_orders_for_provider)
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—à–∏–±–∫–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞.
    """
    from admin import export_orders_for_provider, export_accounting_report, export_monthly_report
    try:
        if user_id in CONFIG.admin_ids:
            await export_monthly_report(update, context, start_date, end_date)
        elif user_id in CONFIG.accounting_ids:
            await export_accounting_report(update, context, start_date, end_date)
        elif user_id in CONFIG.provider_ids:
            await export_orders_for_provider(update, context, start_date, end_date)
        else:
            await update.message.reply_text("‚ùå –ù–µ—Ç –ø—Ä–∞–≤")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞: {e}", exc_info=True)
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –æ—Ç—á–µ—Ç–∞")

async def send_admin_daily_report(application):
    """
    –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã Update –∏ Context –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —Å–∏—Å—Ç–µ–º–æ–π –æ—Ç—á–µ—Ç–æ–≤.
    –õ–æ–≥–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–∞–∂–¥–æ–º—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.
    –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é –∏–∑ –≤–Ω–µ—à–Ω–µ–≥–æ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –∑–∞–¥–∞—á.
    """
    try:
        logger.info("–ó–∞–ø—É—Å–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–Ω–µ–≤–Ω–æ–≥–æ –∞–¥–º–∏–Ω –æ—Ç—á–µ—Ç–∞")
        
        now = datetime.now(CONFIG.timezone)
        today = now.date()
        
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç Update –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –≤ —Ñ—É–Ω–∫—Ü–∏—é –æ—Ç—á–µ—Ç–∞
        class FakeUpdate:
            def __init__(self, bot, chat_id):
                self.effective_user = type('', (), {'id': 0})()  # –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è user.id
                self.effective_chat = type('', (), {'id': chat_id})()
                self.message = type('', (), {'text': ''})()  # –ó–∞–≥–ª—É—à–∫–∞
        
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
        class FakeContext:
            def __init__(self, bot):
                self.bot = bot
        
        fake_context = FakeContext(application.bot)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∂–¥–æ–º—É –∞–¥–º–∏–Ω—É
        success = 0
        for admin_id in CONFIG.admin_ids:
            try:
                fake_update = FakeUpdate(application.bot, admin_id)
                await export_daily_admin_report(fake_update, fake_context, today)
                success += 1
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–¥–º–∏–Ω—Å–∫–æ–≥–æ –æ—Ç—á–µ—Ç–∞ –∞–¥–º–∏–Ω—É {admin_id}: {e}")
        
        logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {success}/{len(CONFIG.get('admin_ids', []))} –∞–¥–º–∏–Ω–∞–º")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ send_admin_daily_report: {e}")
