# ##handlers/common_handlers.py
from asyncio.log import logger
from datetime import datetime
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.ext import ContextTypes
from config import TIMEZONE
from db import db
from handlers.common import show_main_menu
from utils import can_modify_order

# --- –ü—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–∫–∞–∑–æ–≤ ---
async def view_orders(update: Update, context: ContextTypes.DEFAULT_TYPE, is_cancellation=False):
    """
    –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
    - update: –û–±—ä–µ–∫—Ç Update –æ—Ç Telegram
    - context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
    - is_cancellation: –§–ª–∞–≥, —É–∫–∞–∑—ã–≤–∞—é—â–∏–π —á—Ç–æ –≤—ã–∑–æ–≤ –ø—Ä–æ–∏–∑–æ—à–µ–ª –ø–æ—Å–ª–µ –æ—Ç–º–µ–Ω—ã –∑–∞–∫–∞–∑–∞
    
    –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª:
    - –ü–æ–ª—É—á–∞–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–∫–∞–∑—ã –∏–∑ –ë–î (–Ω–µ –æ—Ç–º–µ–Ω–µ–Ω–Ω—ã–µ –∏ –Ω–∞ –±—É–¥—É—â–∏–µ –¥–∞—Ç—ã)
    - –§–æ—Ä–º–∏—Ä—É–µ—Ç –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –æ—Ç–º–µ–Ω—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∑–∞–∫–∞–∑–∞
    - –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–ª—É—á–∞–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –∑–∞–∫–∞–∑–æ–≤
    - –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∫–∞–∫ –≤—ã–∑–æ–≤ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è, —Ç–∞–∫ –∏ –∏–∑ callback-–∑–∞–ø—Ä–æ—Å–∞
    """
    logger.info("=== –ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ view_orders ===")
    try:
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫ –≤—ã–∑–æ–≤–∞
        query = update.callback_query if hasattr(update, 'callback_query') else None
        message = query.message if query else update.message
        user = query.from_user if query else update.effective_user
        
        logger.info(f"–ò—Å—Ç–æ—á–Ω–∏–∫ –≤—ã–∑–æ–≤–∞: {'callback' if query else 'message'}")
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID: {user.id if user else '–Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω'}")

        if not message or not user:
            logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
            return

        user_id = user.id
        today = datetime.now(TIMEZONE).date()
        today_str = today.isoformat()

        # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–∫–∞–∑—ã
        db.cursor.execute("""
            SELECT target_date, quantity, is_preliminary
            FROM orders 
            WHERE user_id = (SELECT id FROM users WHERE telegram_id = ?)
            AND is_cancelled = FALSE
            AND target_date >= ?
            ORDER BY target_date
        """, (user_id, today_str))
        active_orders = db.cursor.fetchall()
        logger.info(f"–ù–∞–π–¥–µ–Ω–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤: {len(active_orders)}")
        if active_orders:
            logger.info(f"–ü—Ä–∏–º–µ—Ä –∑–∞–∫–∞–∑–∞: {active_orders[0]}")

        # –ï—Å–ª–∏ –∑–∞–∫–∞–∑–æ–≤ –Ω–µ—Ç
        if not active_orders:
            text = "‚úÖ –í—Å–µ –∑–∞–∫–∞–∑—ã –æ—Ç–º–µ–Ω–µ–Ω—ã." if is_cancellation else "‚ÑπÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤."
            if query:
                try:
                    await query.edit_message_text(text)
                except:
                    await query.message.reply_text(text)
            else:
                await message.reply_text(text)
            return await show_main_menu(message, user_id)

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        response = "üì¶ <b>–í–∞—à–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–∫–∞–∑—ã:</b>\n\n"
        response += "<i>–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∑–∞–∫–∞–∑, —á—Ç–æ–±—ã –æ—Ç–º–µ–Ω–∏—Ç—å –µ–≥–æ</i>\n\n"
        
        keyboard = []
        days_ru = ["–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "–í—Ç–æ—Ä–Ω–∏–∫", "–°—Ä–µ–¥–∞", "–ß–µ—Ç–≤–µ—Ä–≥", "–ü—è—Ç–Ω–∏—Ü–∞", "–°—É–±–±–æ—Ç–∞", "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"]

        for order in active_orders:
            target_date = datetime.strptime(order[0], "%Y-%m-%d").date()
            day_name = days_ru[target_date.weekday()]
            date_str = target_date.strftime('%d.%m')
            qty = order[1]
            status = " (–ø—Ä–µ–¥–≤.)" if order[2] else ""

            keyboard.append([
                InlineKeyboardButton(
                    f"{day_name} {date_str} - {qty} –ø–æ—Ä—Ü.{status}",
                    callback_data=f"cancel_order_{target_date.strftime('%Y-%m-%d')}"
                )
            ])

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é
        keyboard.append([
            InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main_menu")
        ])

        reply_markup = InlineKeyboardMarkup(keyboard)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        if query:
            try:
                await query.edit_message_text(
                    text=response,
                    reply_markup=reply_markup,
                    parse_mode="HTML"
                )
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
                await query.message.reply_text(
                    text=response,
                    reply_markup=reply_markup,
                    parse_mode="HTML"
                )
        else:
            await message.reply_text(
                text=response,
                reply_markup=reply_markup,
                parse_mode="HTML"
            )

    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ view_orders: {str(e)}", exc_info=True)
        error_msg = "‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–∫–∞–∑–æ–≤"
        if query:
            await query.answer(error_msg)
        await show_main_menu(message, user_id)