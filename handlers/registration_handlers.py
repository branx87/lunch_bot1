# ##handlers/registration_handlers.py
import sqlite3
import logging
from telegram import Update, KeyboardButton, ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import ConversationHandler
from telegram.ext import ContextTypes
from datetime import datetime, timedelta

from config import CONFIG
from constants import AWAIT_MESSAGE_TEXT, FULL_NAME, LOCATION, PHONE
from db import db
from handlers.common import show_main_menu
from handlers.message_handlers import handle_admin_message, start_user_to_admin_message

logger = logging.getLogger(__name__)

async def get_phone(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –ü–æ–ª—É—á–∞–µ—Ç –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¢–û–õ–¨–ö–û —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É "üì± –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞"
    """
    user = update.effective_user
    logger.info(f"–ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id}")

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏–ª –∫–æ–Ω—Ç–∞–∫—Ç, –∞ –Ω–∞–ø–∏—Å–∞–ª —Ç–µ–∫—Å—Ç
    if not update.message.contact:
        # –ü–æ–≤—Ç–æ—Ä–Ω–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–æ–º–µ—Ä–∞
        keyboard = [[KeyboardButton("üì± –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞", request_contact=True)]]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True)
        await update.message.reply_text(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É 'üì± –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞' –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–∞—à–µ–≥–æ –Ω–æ–º–µ—Ä–∞",
            reply_markup=reply_markup
        )
        return PHONE

    try:
        # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–º–µ—Ä –∏–∑ –∫–æ–Ω—Ç–∞–∫—Ç–∞
        phone = update.message.contact.phone_number
        
        if not phone:
            await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.")
            return PHONE

        # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (—É–±–∏—Ä–∞–µ–º –≤—Å–µ –Ω–µ—Ü–∏—Ñ—Ä–æ–≤—ã–µ —Å–∏–º–≤–æ–ª—ã –∫—Ä–æ–º–µ + –≤ –Ω–∞—á–∞–ª–µ)
        normalized_phone = normalize_phone(phone)
        if not normalized_phone:
            await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞.")
            return PHONE

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç
        context.user_data['phone'] = normalized_phone

        # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ –ë–î
        with db.conn:
            db.cursor.execute("""
                UPDATE users 
                SET phone = ?, updated_at = CURRENT_TIMESTAMP
                WHERE telegram_id = ?
            """, (normalized_phone, user.id))

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–ø–∏—Å—å –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å
        db.cursor.execute("SELECT phone FROM users WHERE telegram_id = ?", (user.id,))
        result = db.cursor.fetchone()
        logger.info(f"–ü–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–µ–ª–µ—Ñ–æ–Ω –≤ –ë–î: {result[0] if result else None}")

        # –ü–µ—Ä–µ—Ö–æ–¥ –∫ –∏–º–µ–Ω–∏
        await update.message.reply_text(
            "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ —Ñ–∞–º–∏–ª–∏—é –∏ –∏–º—è:",
            reply_markup=ReplyKeyboardRemove()  # –£–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –≤–≤–æ–¥–∞
        )
        return FULL_NAME

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ get_phone: {e}", exc_info=True)
        await update.message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –Ω–æ–º–µ—Ä–∞")
        return PHONE


def is_valid_phone(phone: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å—Ç—Ä–æ–∫–∞ –≤–∞–ª–∏–¥–Ω—ã–º –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞"""
    if not phone:
        return False
    
    # –£–¥–∞–ª—è–µ–º –≤—Å–µ —Å–∏–º–≤–æ–ª—ã, –∫—Ä–æ–º–µ —Ü–∏—Ñ—Ä –∏ +
    cleaned = ''.join(c for c in phone if c.isdigit() or c == '+')
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É (–º–∏–Ω–∏–º—É–º 10 —Ü–∏—Ñ—Ä –¥–ª—è —Ä–æ—Å—Å–∏–π—Å–∫–∏—Ö –Ω–æ–º–µ—Ä–æ–≤)
    digits = [c for c in cleaned if c.isdigit()]
    return len(digits) >= 10


def normalize_phone(phone: str) -> str:
    """–ù–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∫ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–º—É —Ñ–æ—Ä–º–∞—Ç—É"""
    if not phone:
        return ""
    
    # –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã –∏ +
    cleaned = ''.join(c for c in phone if c.isdigit() or c == '+')
    
    # –ï—Å–ª–∏ –Ω–æ–º–µ—Ä –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å 8, –∑–∞–º–µ–Ω—è–µ–º –Ω–∞ +7
    if cleaned.startswith('8'):
        cleaned = '+7' + cleaned[1:]
    # –ï—Å–ª–∏ –Ω–æ–º–µ—Ä –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å 7, –¥–æ–±–∞–≤–ª—è–µ–º +
    elif cleaned.startswith('7') and not cleaned.startswith('+7'):
        cleaned = '+' + cleaned
    
    return cleaned

async def get_full_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –§–ò–û –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.
    –ò—â–µ—Ç —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –≤ –ë–î –ø–æ full_name.
    –ï—Å–ª–∏ –Ω–∞—à—ë–ª ‚Äî –æ–±–Ω–æ–≤–ª—è–µ—Ç telegram_id –∏ username —É —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∑–∞–ø–∏—Å–∏.
    –ù–µ —Å–æ–∑–¥–∞—ë—Ç –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π ‚Äî —ç—Ç–∏–º –∑–∞–Ω–∏–º–∞–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä.
    """
    try:
        user = update.effective_user  # –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

        # –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ –ª–æ–≥–∏—Ä–æ–≤–∞—Ç—å
        db.cursor.execute("SELECT id, phone FROM users WHERE telegram_id = ?", (user.id,))
        record_before = db.cursor.fetchone()
        logger.info(f"–ó–∞–ø–∏—Å—å –≤ –ë–î –ø–µ—Ä–µ–¥ get_full_name: {record_before}")

        user_input = update.message.text.strip()
        logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ –∏–º—è: '{user_input}' –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id}")

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
        if user_input == "–ù–∞–ø–∏—Å–∞—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É":
            # –°—Ä–∞–∑—É –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤–≤–æ–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è, –º–∏–Ω—É—è –ø—Ä–æ–≤–µ—Ä–∫–∏
            await update.message.reply_text(
                "‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É:",
                reply_markup=ReplyKeyboardMarkup([["‚ùå –û—Ç–º–µ–Ω–∏—Ç—å"]], resize_keyboard=True)
            )
            context.user_data['user_name'] = user_input  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ, —á—Ç–æ –≤–≤–µ–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            context.user_data['is_registered'] = False
            return AWAIT_MESSAGE_TEXT

        if user_input == "–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞":
            await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ —Ñ–∞–º–∏–ª–∏—é –∏ –∏–º—è:")
            return FULL_NAME

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –∏–º–µ–Ω–∏
        name_parts = user_input.split()
        if len(name_parts) < 2:
            await update.message.reply_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ñ–∞–º–∏–ª–∏—é –∏ –∏–º—è –ø–æ–ª–Ω–æ—Å—Ç—å—é.\n–ü—Ä–∏–º–µ—Ä: –ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω")
            return FULL_NAME

        full_name = ' '.join(name_parts)
        context.user_data['full_name'] = full_name

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç–∞–∫–æ–π —Å–æ—Ç—Ä—É–¥–Ω–∏–∫ –≤ —Å–ø–∏—Å–∫–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
        # –ò—Å–ø–æ–ª—å–∑—É–π –ø—Ä—è–º–æ–π SQL-–∑–∞–ø—Ä–æ—Å:
        db.cursor.execute("SELECT id FROM users WHERE telegram_id = ? AND is_employee = TRUE", (user.id,))
        result = db.cursor.fetchone()
        if result:
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–ª—è–µ—Ç—Å—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–º
            context.user_data['unverified_name'] = full_name
            reply_markup = ReplyKeyboardMarkup(
                [["–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞"], ["–ù–∞–ø–∏—Å–∞—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É"]],
                resize_keyboard=True
            )
            await update.message.reply_text(
                "‚ùå –í–∞—Å –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤.",
                reply_markup=reply_markup
            )
            return FULL_NAME

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ —É–∂–µ –ø–æ telegram_id
        db.cursor.execute("SELECT id FROM users WHERE telegram_id = ?", (user.id,))
        existing_by_telegram = db.cursor.fetchone()

        if existing_by_telegram:
            await update.message.reply_text("‚ö†Ô∏è –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.")
            return ConversationHandler.END

        # –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –ø–æ–ª–Ω–æ–º—É —Å–æ–≤–ø–∞–¥–µ–Ω–∏—é full_name
        db.cursor.execute("""
            SELECT id, full_name 
            FROM users 
            WHERE full_name = ? AND telegram_id IS NULL
        """, (full_name,))

        existing_by_name = db.cursor.fetchone()

        if not existing_by_name:
            # –ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–µ–π –∑–∞–ø–∏—Å–∏ –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏
            reply_markup = ReplyKeyboardMarkup(
                [["–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞"], ["–ù–∞–ø–∏—Å–∞—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É"]],
                resize_keyboard=True
            )
            await update.message.reply_text(
                "‚ùå –¢–∞–∫–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –Ω–µ—Ç –≤ —Å–∏—Å—Ç–µ–º–µ –∏–ª–∏ –æ–Ω —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω.",
                reply_markup=reply_markup
            )
            return FULL_NAME

        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–ª–µ—Ñ–æ–Ω –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        phone = context.user_data.get('phone')

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–ø–∏—Å—å ‚Äî –¥–æ–±–∞–≤–ª—è–µ–º telegram_id, username –∏ —Ç–µ–ª–µ—Ñ–æ–Ω
        with db.conn:
            db.cursor.execute("""
                UPDATE users
                SET telegram_id = ?, 
                    username = ?,
                    phone = ?
                WHERE id = ?
            """, (user.id, user.username, phone, existing_by_name[0]))

        logger.info(f"–û–±–Ω–æ–≤–ª–µ–Ω–∞ –∑–∞–ø–∏—Å—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID: {existing_by_name[0]}")

        # –õ–æ–≥–∏—Ä—É–µ–º –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        db.cursor.execute("SELECT id, phone FROM users WHERE telegram_id = ?", (user.id,))
        record_after = db.cursor.fetchone()
        logger.info(f"–ó–∞–ø–∏—Å—å –≤ –ë–î –ø–æ—Å–ª–µ get_full_name: {record_after}")

        # –ü–µ—Ä–µ—Ö–æ–¥ –∫ –≤—ã–±–æ—Ä—É –ª–æ–∫–∞—Ü–∏–∏
        keyboard = [[loc] for loc in CONFIG.locations]
        reply_markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True)
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –æ–±—ä–µ–∫—Ç:", reply_markup=reply_markup)
        return LOCATION

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ get_full_name: {e}", exc_info=True)
        await update.message.reply_text("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return ConversationHandler.END

async def get_location(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    location = update.message.text

    if location not in CONFIG.locations:
        await update.message.reply_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–±—ä–µ–∫—Ç –∏–∑ —Å–ø–∏—Å–∫–∞.")
        return LOCATION

    try:
        # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        db.cursor.execute("""
            UPDATE users
            SET location = ?, is_verified = TRUE
            WHERE telegram_id = ?
        """, (location, user.id))
        db.conn.commit()

        # –ü–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏
        db.cursor.execute("SELECT is_verified FROM users WHERE telegram_id = ?", (user.id,))
        verified_status = db.cursor.fetchone()[0]
        logger.info(f"–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏: {verified_status}")

        await show_main_menu(update, user.id)
        return ConversationHandler.END

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ª–æ–∫–∞—Ü–∏–∏: {e}")
        await update.message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö")
        return LOCATION