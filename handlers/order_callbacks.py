# ##handlers/order_callbacks.py
import sqlite3
from turtle import update
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import CallbackQueryHandler
from telegram.ext import ContextTypes
from datetime import datetime, date, time, timedelta
import logging

from config import CONFIG, MENU, TIMEZONE
from db import Database
from handlers.common import show_main_menu
from middleware import check_user_access
from utils import can_modify_order
from view_utils import refresh_day_view
from notifications import show_access_denied

logger = logging.getLogger(__name__)
    
async def handle_order_callback(query, now, user, context):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –∑–∞–∫–∞–∑–∞. –í—ã–ø–æ–ª–Ω—è–µ—Ç:
    - –ü—Ä–æ–≤–µ—Ä–∫—É –¥–æ–ø—É—Å—Ç–∏–º–æ—Å—Ç–∏ –∑–∞–∫–∞–∑–∞ (–≤—ã—Ö–æ–¥–Ω—ã–µ, –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è)
    - –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –∑–∞–∫–∞–∑–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    - –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ —á–µ—Ä–µ–∑ refresh_day_view
    - –û–±—Ä–∞–±–æ—Ç–∫—É –≤—Å–µ—Ö –≤–æ–∑–º–æ–∂–Ω—ã—Ö –æ—à–∏–±–æ–∫
    """
    try:
        db = context.bot_data['db']
        _, day_offset_str = query.data.split("_", 1)
        day_offset = int(day_offset_str)
        target_date = (now + timedelta(days=day_offset)).date()
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞ –≤—ã—Ö–æ–¥–Ω—ã–µ –∏ –≤—Ä–µ–º—è
        if target_date.weekday() >= 5:
            await query.answer("‚ÑπÔ∏è –ó–∞–∫–∞–∑—ã –Ω–∞ –≤—ã—Ö–æ–¥–Ω—ã–µ –Ω–µ –ø—Ä–∏–Ω–∏–º–∞—é—Ç—Å—è", show_alert=True)
            return

        if day_offset > 0 and target_date <= now.date():
            await query.answer("‚ùå –ü—Ä–µ–¥–∑–∞–∫–∞–∑ –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å —Ç–æ–ª—å–∫–æ –Ω–∞ –±—É–¥—É—â–∏–µ –¥–∞—Ç—ã", show_alert=True)
            return

        if day_offset == 0 and now.time() >= time(9, 30):
            await query.answer("‚ÑπÔ∏è –ü—Ä–∏—ë–º –∑–∞–∫–∞–∑–æ–≤ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –∑–∞–≤–µ—Ä—à—ë–Ω –≤ 9:30", show_alert=True)
            return

        # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        db.cursor.execute("SELECT id FROM users WHERE telegram_id = ?", (user.id,))
        user_record = db.cursor.fetchone()
        if not user_record:
            await query.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        user_db_id = user_record[0]

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∑–∞–∫–∞–∑
        db.cursor.execute("""
            SELECT quantity FROM orders 
            WHERE user_id = ? 
              AND target_date = ?
              AND is_cancelled = FALSE
        """, (user_db_id, target_date.isoformat()))
        existing_order = db.cursor.fetchone()

        if existing_order:
            await query.answer(f"‚ÑπÔ∏è –£ –≤–∞—Å —É–∂–µ –∑–∞–∫–∞–∑–∞–Ω–æ {existing_order[0]} –ø–æ—Ä—Ü–∏–π", show_alert=True)
            return

        # –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑
        with db.conn:
            db.cursor.execute("""
                INSERT INTO orders (
                    user_id,
                    target_date,
                    order_time,
                    quantity,
                    is_preliminary
                ) VALUES (?, ?, ?, ?, ?)
            """, (
                user_db_id,
                target_date.isoformat(),
                now.strftime("%H:%M:%S"),
                1,
                day_offset > 0
            ))

        # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å (—É–±—Ä–∞–ª–∏ is_order=True)
        await refresh_day_view(query, day_offset, user_db_id, context)
        await query.answer("‚úÖ –ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞: {e}", exc_info=True)
        await query.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ", show_alert=True)
        
async def handle_change_callback(query, now, user, context):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∑–∞–∫–∞–∑–∞. –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç:
    - –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ—Ä—Ü–∏–π (+/-)
    - –ö–Ω–æ–ø–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è/–æ—Ç–º–µ–Ω—ã –∑–∞–∫–∞–∑–∞
    - –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –º–µ–Ω—é –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏
    - –ü—Ä–æ–≤–µ—Ä–∫—É –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è
    """
    # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –¥–æ—Å—Ç—É–ø–∞ –≤ –Ω–∞—á–∞–ª–µ —Ñ—É–Ω–∫—Ü–∏–∏
    if not await check_user_access(user.id, context):
        await show_access_denied(update)
        return
    
    try:
        # –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ callback
        try:
            _, day_offset_str = query.data.split("_", 1)
            day_offset = int(day_offset_str)
        except (ValueError, AttributeError) as e:
            logger.error(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç callback –¥–∞–Ω–Ω—ã—Ö: {query.data}", exc_info=True)
            await query.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤ –∑–∞–ø—Ä–æ—Å–µ", show_alert=True)
            return

        target_date = (now + timedelta(days=day_offset)).date()
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è
        if not can_modify_order(target_date):
            await query.answer("‚ÑπÔ∏è –ò–∑–º–µ–Ω–µ–Ω–∏–µ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø–æ—Å–ª–µ 9:30", show_alert=True)
            if 'user_db_id' in context.user_data:
                await refresh_day_view(query, day_offset, context.user_data['user_db_id'], now)
            return

        # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        try:
            db = context.bot_data['db']
            if 'user_db_id' not in context.user_data:
                db.cursor.execute("SELECT id FROM users WHERE telegram_id = ?", (user.id,))
                user_record = db.cursor.fetchone()
                if not user_record:
                    await query.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
                    return
                context.user_data['user_db_id'] = user_record[0]
            
            user_db_id = context.user_data['user_db_id']
        except sqlite3.Error as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ë–î –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ user_id: {e}", exc_info=True)
            await query.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö", show_alert=True)
            return

        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –∑–∞–∫–∞–∑
        try:
            db.cursor.execute("""
                SELECT quantity FROM orders 
                WHERE user_id = ? AND target_date = ? AND is_cancelled = FALSE
            """, (user_db_id, target_date.isoformat()))
            order_record = db.cursor.fetchone()
            if not order_record:
                await query.answer("‚ÑπÔ∏è –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
                return
            
            current_qty = order_record[0]
        except sqlite3.Error as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ë–î –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞: {e}", exc_info=True)
            await query.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö", show_alert=True)
            return

        # –ü–æ–ª—É—á–∞–µ–º –º–µ–Ω—é –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –¥–µ–Ω—å
        try:
            days_ru = ["–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "–í—Ç–æ—Ä–Ω–∏–∫", "–°—Ä–µ–¥–∞", "–ß–µ—Ç–≤–µ—Ä–≥", "–ü—è—Ç–Ω–∏—Ü–∞", "–°—É–±–±–æ—Ç–∞", "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"]
            day_name = days_ru[target_date.weekday()]
            menu = MENU.get(day_name)
            if not menu:
                logger.error(f"–ú–µ–Ω—é –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –¥–ª—è –¥–Ω—è {day_name}")
                await query.answer("‚ö†Ô∏è –ú–µ–Ω—é –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
                return
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ–Ω—é: {e}", exc_info=True)
            await query.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ–Ω—é", show_alert=True)
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
        context.user_data['current_day_offset'] = day_offset

        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        menu_text = (
            f"üçΩ –ú–µ–Ω—é –Ω–∞ {day_name} ({target_date.strftime('%d.%m')}):\n"
            f"1. üç≤ –ü–µ—Ä–≤–æ–µ: {menu['first']}\n"
            f"2. üçõ –û—Å–Ω–æ–≤–Ω–æ–µ –±–ª—é–¥–æ: {menu['main']}\n"
            f"3. ü•ó –°–∞–ª–∞—Ç: {menu['salad']}\n\n"
            f"üõí –¢–µ–∫—É—â–∏–π –∑–∞–∫–∞–∑: {current_qty} –ø–æ—Ä—Ü–∏–∏"
        )

        keyboard = [
            [
                InlineKeyboardButton("‚ûñ –£–º–µ–Ω—å—à–∏—Ç—å", callback_data=f"dec_{day_offset}"),
                InlineKeyboardButton("‚ûï –£–≤–µ–ª–∏—á–∏—Ç—å", callback_data=f"inc_{day_offset}")
            ],
            [InlineKeyboardButton("‚úîÔ∏è –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"confirm_{day_offset}")],
            [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑", callback_data=f"cancel_{day_offset}")]
        ]

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        try:
            await query.edit_message_text(
                text=menu_text,
                reply_markup=InlineKeyboardMarkup(keyboard),
                parse_mode="Markdown"
            )
            await query.answer()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}", exc_info=True)
            await query.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è", show_alert=True)

    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ handle_change_callback: {e}", exc_info=True)
        await query.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ", show_alert=True)
        
async def handle_cancel_callback(query, now, user, context):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã –∑–∞–∫–∞–∑–∞ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å—é:
    - –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –∏ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ callback-–¥–∞–Ω–Ω—ã—Ö
    - –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –Ω–∞ –æ—Ç–º–µ–Ω—É
    - –ù–∞–¥–µ–∂–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    - –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏–π –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
    """
    try:
        db = context.bot_data['db']
        parts = query.data.split("_")
        
        # –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É
        if len(parts) > 2 and parts[1] == "order":
            date_part = "_".join(parts[2:])
            is_from_orders = True
        else:
            date_part = parts[1]
            is_from_orders = False

        if '-' in date_part:
            target_date = datetime.strptime(date_part, "%Y-%m-%d").date()
            day_offset = (target_date - now.date()).days
        elif date_part.isdigit():
            day_offset = int(date_part)
            target_date = (now + timedelta(days=day_offset)).date()
        else:
            raise ValueError("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –æ—Ç–º–µ–Ω—ã
        if not can_modify_order(target_date):
            await query.answer("‚ÑπÔ∏è –û—Ç–º–µ–Ω–∞ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞ –ø–æ—Å–ª–µ 9:30", show_alert=True)
            return

        # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        db.cursor.execute("SELECT id FROM users WHERE telegram_id = ?", (user.id,))
        user_record = db.cursor.fetchone()
        if not user_record:
            await query.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        user_db_id = user_record[0]

        # –û—Ç–º–µ–Ω—è–µ–º –∑–∞–∫–∞–∑
        with db.conn:
            db.cursor.execute("""
                UPDATE orders
                SET is_cancelled = TRUE,
                    order_time = ?
                WHERE user_id = ?
                  AND target_date = ?
                  AND is_cancelled = FALSE
            """, (now.strftime("%H:%M:%S"), user_db_id, target_date.isoformat()))
            
            if db.cursor.rowcount == 0:
                await query.answer("‚ùå –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
                return

        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} –æ—Ç–º–µ–Ω–∏–ª –∑–∞–∫–∞–∑ –Ω–∞ {target_date}")

        # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        if is_from_orders:
            from handlers.common_handlers import view_orders
            await view_orders(query, context, is_cancellation=True)
        else:
            await refresh_day_view(query, day_offset, user_db_id, context)

        await query.answer("‚úÖ –ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω—ë–Ω")

    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ handle_cancel_callback: {e}", exc_info=True)
        await query.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", show_alert=True)
        
async def handle_confirm_callback(query, now, user, context):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π –∑–∞–∫–∞–∑–∞:
    - –û–±–Ω–æ–≤–ª—è–µ—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —á–µ—Ä–µ–∑ refresh_day_view
    - –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç —Ç–µ–∫—É—â–µ–≥–æ –¥–Ω—è –∏–∑ user_data
    - –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–æ–∑–º–æ–∂–Ω—ã–µ –æ—à–∏–±–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    """
    if not await check_user_access(user.id, context):
        await show_access_denied(update)
        return
    
    try:
        day_offset = context.user_data['current_day_offset']
        await refresh_day_view(query, day_offset, context.user_data['user_db_id'], now)
        await query.answer("‚úÖ –ó–∞–∫–∞–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: {e}")
        await query.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è", show_alert=True)
        
async def modify_portion_count(query, now, user, context, delta):
    """
    –ò–∑–º–µ–Ω—è–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ä—Ü–∏–π –≤ –∑–∞–∫–∞–∑–µ:
    - –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —É–≤–µ–ª–∏—á–µ–Ω–∏–µ/—É–º–µ–Ω—å—à–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
    - –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≥—Ä–∞–Ω–∏—á–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è (1-3 –ø–æ—Ä—Ü–∏–∏)
    - –ü—Ä–∏ —É–º–µ–Ω—å—à–µ–Ω–∏–∏ –¥–æ 0 –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–º–µ–Ω—è–µ—Ç –∑–∞–∫–∞–∑
    - –û–±–Ω–æ–≤–ª—è–µ—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —á–µ—Ä–µ–∑ handle_change_callback
    """
    if not await check_user_access(user.id, context):
        await show_access_denied(update)
        return
    
    try:
        db = context.bot_data['db']
        day_offset = context.user_data['current_day_offset']
        target_date = (now + timedelta(days=day_offset)).date()
        user_db_id = context.user_data['user_db_id']
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
        db.cursor.execute("""
            SELECT quantity FROM orders 
            WHERE user_id = ? AND target_date = ? AND is_cancelled = FALSE
        """, (user_db_id, target_date.isoformat()))
        current_qty = db.cursor.fetchone()[0]
        new_qty = current_qty + delta

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥—Ä–∞–Ω–∏—Ü
        if new_qty < 1:
            return await handle_cancel_callback(query, now, user, context)
        if new_qty > 3:
            await query.answer("‚ÑπÔ∏è –ú–∞–∫—Å–∏–º—É–º 3 –ø–æ—Ä—Ü–∏–∏")
            return

        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
        with db.conn:
            db.cursor.execute("""
                UPDATE orders SET quantity = ? 
                WHERE user_id = ? AND target_date = ? AND is_cancelled = FALSE
            """, (new_qty, user_db_id, target_date.isoformat()))

        # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –±–µ–∑ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é
        await handle_change_callback(query, now, user, context)
        await query.answer(f"–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {new_qty} –ø–æ—Ä—Ü–∏–∏")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞: {e}")
        await query.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è", show_alert=True)
        
def setup_order_callbacks(application):
    """
    –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –∏ –¥–æ–±–∞–≤–ª—è–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback-–∑–∞–ø—Ä–æ—Å–æ–≤:
    - –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–æ–≤ (order_*)
    - –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ—Ä—Ü–∏–π (inc_*, dec_*)
    - –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ (change_*)
    - –û—Ç–º–µ–Ω–∞ –∑–∞–∫–∞–∑–∞ (cancel_*)
    - –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ (confirm_*)
    """
    application.add_handler(CallbackQueryHandler(
        callback_handler,
        pattern=r'^(order|inc|dec|change|cancel|confirm)_'
    ))
    
    # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç —Å —Ä–∞–∑–¥–µ–ª—å–Ω—ã–º–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞–º–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞ callback:
    # handlers = [
    #     CallbackQueryHandler(handle_order_callback, pattern=r'^order_'),
    #     CallbackQueryHandler(modify_portion_count, pattern=r'^inc_'),
    #     CallbackQueryHandler(modify_portion_count, pattern=r'^dec_'),
    #     CallbackQueryHandler(handle_change_callback, pattern=r'^change_'),
    #     CallbackQueryHandler(handle_cancel_callback, pattern=r'^cancel_'),
    #     CallbackQueryHandler(handle_confirm_callback, pattern=r'^confirm_')
    # ]
    # for handler in handlers:
    #     application.add_handler(handler)

async def callback_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    if not query:
        return
    
    try:
        user = update.effective_user
        if not user:
            return
            
        # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –≤—ã–∑–æ–≤ check_user_access
        if not await check_user_access(user.id, context):
            await show_access_denied(update)
            return
        
        now = datetime.now(TIMEZONE)
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
        if query.data == "back_to_main_menu":
            await show_main_menu(query.message, user.id)
            return
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
        if query.data.startswith(('admin_', 'provider_', 'accountant_', 'staff_', 'holiday_')) and ('_prev_' in query.data or '_next_' in query.data):
            from handlers.admin_config_handlers import handle_pagination
            return await handle_pagination(update, context)
            
        # –û—Å—Ç–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ callback'–æ–≤
        user = update.effective_user
        now = datetime.now(TIMEZONE)
        
        if query.data.startswith("inc_"):
            await modify_portion_count(query, now, user, context, +1)
        elif query.data.startswith("dec_"):
            await modify_portion_count(query, now, user, context, -1)
        elif query.data.startswith("change_"):
            await handle_change_callback(query, now, user, context)
        elif query.data.startswith("cancel_"):
            await handle_cancel_callback(query, now, user, context)
        elif query.data.startswith("confirm_"):
            await handle_confirm_callback(query, now, user, context)
        elif query.data.startswith("order_"):
            await handle_order_callback(query, now, user, context)
        elif query.data.startswith("del_"):  # –û–±—Ä–∞–±–æ—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∏–π
            from handlers.admin_config_handlers import handle_deletion
            await handle_deletion(update, context)
        elif query.data == "back_to_menu":
            await show_main_menu(query.message, user.id)
        elif query.data == "noop":
            await query.answer()
        elif query.data == "refresh":
            pass
        else:
            logger.warning(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π callback: {query.data}")
            await query.answer("‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ callback_handler: {e}", exc_info=True)
        await query.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ")

async def get_user_db_id(context: ContextTypes.DEFAULT_TYPE, telegram_id: int = None):
    """
    –ü–æ–ª—É—á–∞–µ—Ç ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î –ø–æ telegram_id
    Args:
        context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –±–æ—Ç–∞ (–¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –ë–î)
        telegram_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Telegram (–µ—Å–ª–∏ None, –±–µ—Ä–µ—Ç—Å—è –∏–∑ update)
    Returns:
        int: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î –∏–ª–∏ None –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω
    """
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø –∫ –ë–î –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        db = context.bot_data['db']
        
        # –ï—Å–ª–∏ telegram_id –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω, –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        if telegram_id is None and hasattr(context, 'user_data') and 'telegram_id' in context.user_data:
            telegram_id = context.user_data['telegram_id']
        
        if telegram_id is None:
            logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å telegram_id –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
            return None
        
        # –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
        db.cursor.execute("SELECT id FROM users WHERE telegram_id = ?", (telegram_id,))
        result = db.cursor.fetchone()
        
        if result:
            return result[0]
        logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å telegram_id={telegram_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î")
        return None
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ get_user_db_id: {e}", exc_info=True)
        return None