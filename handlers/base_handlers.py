# ##handlers/base_handlers.py
from email import message
import logging
import asyncio
from telegram import Update, ReplyKeyboardRemove, KeyboardButton, ReplyKeyboardMarkup
from telegram.ext import ConversationHandler
from telegram.ext import ContextTypes
from datetime import datetime, timedelta

from bot_keyboards import create_admin_reports_menu, create_main_menu_keyboard, create_report_type_menu, create_month_selection_keyboard
from db import CONFIG
from constants import FULL_NAME, PHONE, SELECT_MONTH_RANGE
from db import db
from handlers.common import show_main_menu
from handlers.common_handlers import view_orders
from handlers.common_report_handlers import select_month_range
from handlers.menu_handlers import monthly_stats, show_today_menu, show_week_menu
from report_generators import export_accounting_report, export_daily_admin_report, export_daily_orders_for_provider, export_orders_for_provider
from utils import check_registration, handle_unregistered
from bot_keyboards import get_user_role

logger = logging.getLogger(__name__)

__all__ = ['start', 'error_handler', 'test_connection', 'main_menu', 'handle_text_message']

ADMIN_REPORTS_MENU = "ADMIN_REPORTS_MENU"
SELECT_REPORT_TYPE = "SELECT_REPORT_TYPE"

def get_user_role(user_id):
    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –æ—Å–Ω–æ–≤–µ ID"""
    
    user_id = str(user_id)
    roles = []
    
    if user_id in [str(id) for id in CONFIG.admin_ids]:
        roles.append("–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä")
    if user_id in [str(id) for id in CONFIG.provider_ids]:
        roles.append("–ü–æ—Å—Ç–∞–≤—â–∏–∫")
    if user_id in [str(id) for id in CONFIG.accounting_ids]:
        roles.append("–ë—É—Ö–≥–∞–ª—Ç–µ—Ä")
    
    return ", ".join(roles) if roles else "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start. –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:
    - –î–ª—è –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–∞—á–∏–Ω–∞–µ—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é —Å –∫–Ω–æ–ø–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–æ–º–µ—Ä–∞
    - –î–ª—è –Ω–µ–∑–∞–≤–µ—Ä—à–∏–≤—à–∏—Ö —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å
    - –î–ª—è –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    """
    await update.message.reply_text("–û–±–Ω–æ–≤–ª—è—é –º–µ–Ω—é...", reply_markup=ReplyKeyboardRemove())
    user = update.effective_user

    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º, –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–º –∏–ª–∏ –±—É—Ö–≥–∞–ª—Ç–µ—Ä–æ–º
        if user.id in CONFIG.admin_ids or \
           user.id in CONFIG.provider_ids or \
           user.id in CONFIG.accounting_ids:
            
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∏ —Å—Ä–∞–∑—É –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
            return await show_main_menu(update, user.id)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        db.cursor.execute("""
            SELECT id, full_name, is_verified, is_deleted 
            FROM users 
            WHERE telegram_id = ?
        """, (user.id,))
        user_data = db.cursor.fetchone()

        if user_data:
            user_id, full_name, is_verified, is_deleted = user_data

            if is_deleted:
                await update.message.reply_text(
                    "‚ùå –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
                    reply_markup=ReplyKeyboardRemove()
                )
                return ConversationHandler.END

            if is_verified:
                await show_main_menu(update, user.id)
                return ConversationHandler.END

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
        keyboard = [[KeyboardButton("üì± –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞", request_contact=True)]]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True)
        await update.message.reply_text(
            "–î–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É—è –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:",
            reply_markup=reply_markup
        )
        return PHONE

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ start: {e}")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return await show_main_menu(update, user.id)

async def error_handler(update: object, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ –±–æ—Ç–∞. –õ–æ–≥–∏—Ä—É–µ—Ç –æ—à–∏–±–∫—É –∏:
    - –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
    - –ò–Ω—Ñ–æ—Ä–º–∏—Ä—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ –ø—Ä–æ–±–ª–µ–º–µ
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–∞–∫ –æ—à–∏–±–∫–∏ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞—Ö, —Ç–∞–∫ –∏ —Å–∏—Å—Ç–µ–º–Ω—ã–µ –æ—à–∏–±–∫–∏
    """
    error = str(context.error)
    logger.error(f"–û—à–∏–±–∫–∞: {error}", exc_info=context.error)
    
    for admin_id in CONFIG.admin_ids:
        try:
            await context.bot.send_message(
                chat_id=admin_id,
                text=f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤ –±–æ—Ç–µ:\n\n{error}\n\n"
                     f"Update: {update if update else '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö'}"
            )
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É {admin_id}: {e}")
    
    if update and isinstance(update, Update) and update.effective_message:
        try:
            await update.effective_message.reply_text("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: {e}")

async def test_connection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        # –£–¥–∞–ª—è–µ–º —Å–∞–º—É –∫–æ–º–∞–Ω–¥—É /test (–µ—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–∞–≤–∞)
        try:
            await update.message.delete()
        except Exception as delete_error:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∫–æ–º–∞–Ω–¥—É: {delete_error}")
            
        user = update.effective_user
        bot_info = await context.bot.get_me()
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î
        db.cursor.execute("""
            SELECT full_name, phone, is_deleted, is_verified 
            FROM users 
            WHERE telegram_id = ?
        """, (user.id,))
        user_data = db.cursor.fetchone()
        
        if user_data:
            full_name, phone, is_deleted, is_verified = user_data
            user_status = "‚ùå –£–¥–∞–ª–µ–Ω/–∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω" if is_deleted else (
                "üü° –û–∂–∏–¥–∞–µ—Ç –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏" if not is_verified else "‚úÖ –ê–∫—Ç–∏–≤–µ–Ω"
            )
        else:
            full_name = phone = "–Ω–µ —É–∫–∞–∑–∞–Ω–æ"
            user_status = "‚ùå –ù–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω"
        
        response = (
            "‚úÖ –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç\n\n"
            f"üë§ –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:\n"
            f"–ò–º—è: {full_name}\n"
            f"–¢–µ–ª–µ—Ñ–æ–Ω: {phone if phone else '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n"
            f"ID: {user.id}\n"
            f"–†–æ–ª—å: {get_user_role(user.id)}\n"  # –ù–æ–≤–∞—è —Å—Ç—Ä–æ–∫–∞ —Å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ–º —Ä–æ–ª–∏
            f"–õ–æ–≥–∏–Ω: @{user.username if user.username else '–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}\n"
            f"–°—Ç–∞—Ç—É—Å: {user_status}\n\n"
            f"ü§ñ –ë–æ—Ç:\n"
            f"ID: {bot_info.id}\n"
            f"–ò–º—è: @{bot_info.username}\n"
            f"–í–µ—Ä—Å–∏—è: 2.2.6\n"
            f"–°—Ç–∞—Ç—É—Å: –∞–∫—Ç–∏–≤–µ–Ω"
        )
        
        msg = await update.message.reply_text(response)
        await asyncio.sleep(10)
        await msg.delete()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {e}")
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

async def handle_text_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π. –í—ã–ø–æ–ª–Ω—è–µ—Ç:
    - –û–±—Ä–∞–±–æ—Ç–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –Ω–µ–∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    - –ü—Ä–æ–≤–µ—Ä–∫—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    - –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    - –û–±—Ä–∞–±–æ—Ç–∫—É –∑–∞–ø—Ä–æ—Å–æ–≤ –æ—Ç—á–µ—Ç–æ–≤ –ø–æ –º–µ—Å—è—Ü–∞–º
    """
    user = update.effective_user
    text = update.message.text
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: '{text}' –æ—Ç {user.id}")

    try:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –Ω–µ–∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if text == "–ù–∞–ø–∏—Å–∞—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É":
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Å–ø–∏—Å–∫–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ (is_employee = TRUE)
            db.cursor.execute("""
                SELECT id FROM users 
                WHERE full_name LIKE ? AND is_employee = TRUE AND is_deleted = FALSE
            """, (f"%{user.full_name}%",))
            employee_data = db.cursor.fetchone()

            if not employee_data:
                await update.message.reply_text(
                    "‚ùå –í—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ —Å–ø–∏—Å–∫–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤",
                    reply_markup=ReplyKeyboardRemove()
                )
                return ConversationHandler.END

            # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
            admin_message = (
                f"‚ö†Ô∏è –ù–µ–∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—ã—Ç–∞–µ—Ç—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞:\n"
                f"üÜî ID: {user.id}\n"
                f"üë§ Username: @{user.username if user.username else '–Ω–µ—Ç'}\n"
                f"üìù –ò–º—è: {user.full_name}"
            )

            for admin_id in CONFIG.admin_ids:
                try:
                    await context.bot.send_message(chat_id=admin_id, text=admin_message)
                except Exception as e:
                    logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É {admin_id}: {e}")

            await update.message.reply_text(
                "‚úÖ –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É. –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞.",
                reply_markup=ReplyKeyboardMarkup([["–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞"]], resize_keyboard=True)
            )
            return FULL_NAME

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ –∞–¥–º–∏–Ω/–ø–æ—Å—Ç–∞–≤—â–∏–∫/–±—É—Ö–≥–∞–ª—Ç–µ—Ä
        if user.id not in CONFIG.admin_ids and \
           user.id not in CONFIG.provider_ids and \
           user.id not in CONFIG.accounting_ids:
            if not await check_employee_registration(update, context):
                return await handle_unregistered(update, context)

        if text in ["–¢–µ–∫—É—â–∏–π –º–µ—Å—è—Ü", "–ü—Ä–æ—à–ª—ã–π –º–µ—Å—è—Ü"] and context.user_data.get('report_type'):
            return await select_month_range(update, context)

        # –í—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –ø–µ—Ä–µ–¥–∞–µ–º –≤ main_menu
        return await main_menu(update, context)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_text_message: {e}", exc_info=True)
        await update.message.reply_text(
            "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start",
            reply_markup=ReplyKeyboardRemove()
        )
        return await show_main_menu(update, user.id)

async def main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –ì–ª–∞–≤–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é. –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç:
    - –ù–∞–≤–∏–≥–∞—Ü–∏—é –ø–æ —Ä–∞–∑–¥–µ–ª–∞–º –º–µ–Ω—é (–¥–Ω–µ–≤–Ω–æ–µ/–Ω–µ–¥–µ–ª—å–Ω–æ–µ –º–µ–Ω—é, –∑–∞–∫–∞–∑—ã)
    - –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–æ–≤ (–¥–Ω–µ–≤–Ω—ã—Ö/–º–µ—Å—è—á–Ω—ã—Ö) —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞
    - –û–±—Ä–∞–±–æ—Ç–∫—É –∫–æ–º–∞–Ω–¥—ã –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –º–µ–Ω—é
    - –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
    """
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞: '{update.message.text}' –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {update.effective_user.id}")
    
    try:
        user = update.effective_user
        text = update.message.text
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –º–µ–Ω—é
        if text == "–ú–µ–Ω—é –Ω–∞ —Å–µ–≥–æ–¥–Ω—è":
            return await show_today_menu(update, context)
        
        elif text == "–ú–µ–Ω—é –Ω–∞ –Ω–µ–¥–µ–ª—é":
            return await show_week_menu(update, context)
        
        elif text == "–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–∫–∞–∑—ã":
            return await view_orders(update, context)
        
        elif text == "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –º–µ—Å—è—Ü":
            return await monthly_stats(update, context)
        
        elif text == "‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –º–µ–Ω—é":
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–º
            if user.id in CONFIG.provider_ids:
                # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞
                from handlers.provider_handlers import edit_menu
                return await edit_menu(update, context)
            else:
                await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –º–µ–Ω—é")
                return await show_main_menu(update, user.id)
        
        elif text == "üìÖ –û—Ç—á–µ—Ç –∑–∞ –º–µ—Å—è—Ü":
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∏–ø –æ—Ç—á–µ—Ç–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø—Ä–∞–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if user.id in getattr(CONFIG, 'admin_ids', []):
                context.user_data['report_type'] = 'admin_monthly'
            elif user.id in getattr(CONFIG, 'provider_ids', []):
                context.user_data['report_type'] = 'provider_monthly'
            elif user.id in getattr(CONFIG, 'accounting_ids', []):
                context.user_data['report_type'] = 'accounting_monthly'
            else:
                await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –æ—Ç—á–µ—Ç–æ–≤")
                return await show_main_menu(update, user.id)

            # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–µ—Ä–∏–æ–¥
            await update.message.reply_text(
                "–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥:",
                reply_markup=ReplyKeyboardMarkup([
                    ["–¢–µ–∫—É—â–∏–π –º–µ—Å—è—Ü"],
                    ["–ü—Ä–æ—à–ª—ã–π –º–µ—Å—è—Ü"],
                    ["–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]
                ], resize_keyboard=True)
            )
            return SELECT_MONTH_RANGE

        elif text == "üìä –û—Ç—á–µ—Ç –∑–∞ –¥–µ–Ω—å":
            today = datetime.now(CONFIG.timezone).date()
            if user.id in getattr(CONFIG, 'admin_ids', []):
                context.user_data['report_type'] = 'admin_daily'
                await export_daily_admin_report(update, context, today)
            elif user.id in getattr(CONFIG, 'provider_ids', []):
                context.user_data['report_type'] = 'provider_daily'
                await export_daily_orders_for_provider(update, context, today)
            elif user.id in getattr(CONFIG, 'accounting_ids', []):
                context.user_data['report_type'] = 'accounting_daily'
                await export_accounting_report(update, context, today, today)
            else:
                await update.message.reply_text("‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞")
            return await show_main_menu(update, user.id)
        
        elif text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
            return await show_main_menu(update, user.id)
        
        elif text == "–û–±–Ω–æ–≤–∏—Ç—å –º–µ–Ω—é":
            await update.message.reply_text("–û–±–Ω–æ–≤–ª—è—é –º–µ–Ω—é...", reply_markup=ReplyKeyboardRemove())
            return await show_main_menu(update, user.id)

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã
        else:
            await update.message.reply_text(
                "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å –º–µ–Ω—é –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start",
                reply_markup=ReplyKeyboardRemove()
            )
            return await show_main_menu(update, user.id)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ main_menu: {e}", exc_info=True)
        await update.message.reply_text(
            "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
            reply_markup=create_main_menu_keyboard(user.id) if user else ReplyKeyboardRemove()
        )
        return ConversationHandler.END
    
async def handle_registered_user(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª:
    - –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –±—É—Ö–≥–∞–ª—Ç–µ—Ä—Å–∫–∏—Ö –æ—Ç—á–µ—Ç–æ–≤
    - –ì–µ–Ω–µ—Ä–∞—Ü–∏—é –æ—Ç—á–µ—Ç–æ–≤ –¥–ª—è –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤
    - –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ –≤ main_menu
    """
    try:
        user = update.effective_user
        text = update.message.text

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º, –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–º –∏–ª–∏ –±—É—Ö–≥–∞–ª—Ç–µ—Ä–æ–º
        role = get_user_role(user.id)

        if not role:
            # –ï—Å–ª–∏ —Ä–æ–ª—å –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ ‚Äî –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–º
            # –ò–Ω–∞—á–µ ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É
            await update.message.reply_text(
                "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—É",
                reply_markup=ReplyKeyboardRemove()
            )
            return ConversationHandler.END

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç—á—ë—Ç–æ–≤
        if text == "üí∞ –ë—É—Ö–≥–∞–ª—Ç–µ—Ä—Å–∫–∏–π –æ—Ç—á–µ—Ç":
            if role in ['accountant', 'admin']:
                context.user_data['report_type'] = 'accounting'
                await update.message.reply_text(
                    "–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥:",
                    reply_markup=ReplyKeyboardMarkup([
                        ["–¢–µ–∫—É—â–∏–π –º–µ—Å—è—Ü", "–ü—Ä–æ—à–ª—ã–π –º–µ—Å—è—Ü"],
                        ["–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]
                    ], resize_keyboard=True)
                )
                return SELECT_MONTH_RANGE

        elif text == "üì¶ –û—Ç—á–µ—Ç –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞":
            if role in ['provider', 'admin']:
                context.user_data['report_type'] = 'provider'
                await update.message.reply_text(
                    "–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥:",
                    reply_markup=ReplyKeyboardMarkup([
                        ["–¢–µ–∫—É—â–∏–π –º–µ—Å—è—Ü", "–ü—Ä–æ—à–ª—ã–π –º–µ—Å—è—Ü"],
                        ["–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]
                    ], resize_keyboard=True)
                )
                return SELECT_MONTH_RANGE

        elif text in ["üìä –û—Ç—á–µ—Ç –∑–∞ –¥–µ–Ω—å", "üìÖ –û—Ç—á–µ—Ç –∑–∞ –º–µ—Å—è—Ü"]:
            if role in ['provider', 'accountant', 'admin']:
                # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º report_type –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–æ–ª–∏ –∏ —Ç–∏–ø–∞ –æ—Ç—á–µ—Ç–∞
                if text == "üìä –û—Ç—á–µ—Ç –∑–∞ –¥–µ–Ω—å":
                    if role == 'provider':
                        context.user_data['report_type'] = 'provider_daily'
                    elif role == 'accountant':
                        context.user_data['report_type'] = 'accounting_daily'
                    elif role == 'admin':
                        context.user_data['report_type'] = 'admin_daily'
                else:  # "üìÖ –û—Ç—á–µ—Ç –∑–∞ –º–µ—Å—è—Ü"
                    if role == 'provider':
                        context.user_data['report_type'] = 'provider_monthly'
                    elif role == 'accountant':
                        context.user_data['report_type'] = 'accounting_monthly'
                    elif role == 'admin':
                        context.user_data['report_type'] = 'admin_monthly'
                
                # –î–ª—è –¥–Ω–µ–≤–Ω—ã—Ö –æ—Ç—á–µ—Ç–æ–≤ —Å—Ä–∞–∑—É –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
                if text == "üìä –û—Ç—á–µ—Ç –∑–∞ –¥–µ–Ω—å":
                    today = datetime.now(CONFIG.timezone).date()
                    if role == 'admin':
                        await export_daily_admin_report(update, context, today)
                    elif role == 'provider':
                        await export_daily_orders_for_provider(update, context, today)
                    elif role == 'accountant':
                        await export_accounting_report(update, context, today, today)
                    return await show_main_menu(update, user.id)
                # –î–ª—è –º–µ—Å—è—á–Ω—ã—Ö –æ—Ç—á–µ—Ç–æ–≤ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–µ—Ä–∏–æ–¥
                else:
                    await update.message.reply_text(
                        "–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥:",
                        reply_markup=ReplyKeyboardMarkup([
                            ["–¢–µ–∫—É—â–∏–π –º–µ—Å—è—Ü"],
                            ["–ü—Ä–æ—à–ª—ã–π –º–µ—Å—è—Ü"],
                            ["–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]
                        ], resize_keyboard=True)
                    )
                    return SELECT_MONTH_RANGE
            else:
                await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —ç—Ç–æ—Ç –æ—Ç—á—ë—Ç")
                return

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_registered_user: {e}", exc_info=True)
        await update.message.reply_text(
            "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
            reply_markup=ReplyKeyboardRemove()
        )
        return ConversationHandler.END
    
# async def check_employee_registration(update: Update, context: ContextTypes.DEFAULT_TYPE) -> bool:
#     """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∫–∞–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫"""
#     user = update.effective_user

#     try:
#         # –ê–¥–º–∏–Ω—ã, –ø–æ—Å—Ç–∞–≤—â–∏–∫–∏ –∏ –±—É—Ö–≥–∞–ª—Ç–µ—Ä—ã –Ω–µ –æ–±—è–∑–∞–Ω—ã –±—ã—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º–∏
#         if user.id in CONFIG.admin_ids:
#             return True
#         if user.id in CONFIG.provider_ids:
#             return True
#         if user.id in CONFIG.accounting_ids:
#             return True

#         # –û—Å—Ç–∞–ª—å–Ω—ã–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º–∏
#         db.cursor.execute("""
#             SELECT is_verified, is_employee 
#             FROM users 
#             WHERE telegram_id = ? AND is_deleted = FALSE
#         """, (user.id,))
        
#         result = db.cursor.fetchone()
#         if not result:
#             return False

#         is_verified, is_employee = result
#         return bool(is_employee and is_verified)

#     except Exception as e:
#         logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {e}")
#         return False

async def check_employee_registration(update: Update, context: ContextTypes.DEFAULT_TYPE) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–º –∏–ª–∏ –∏–º–µ–µ—Ç —Ä–æ–ª—å provider/accountant/admin"""
    user = update.effective_user

    # –ê–¥–º–∏–Ω—ã, –ø–æ—Å—Ç–∞–≤—â–∏–∫–∏ –∏ –±—É—Ö–≥–∞–ª—Ç–µ—Ä—ã –∏–∑ .env –ø–æ–ª—É—á–∞—é—Ç –¥–æ—Å—Ç—É–ø –±–µ–∑ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    if user.id in CONFIG.admin_ids or user.id in CONFIG.provider_ids or user.id in CONFIG.accounting_ids:
        return True

    try:
        db.cursor.execute("""
            SELECT is_verified, is_employee 
            FROM users 
            WHERE telegram_id = ? AND is_deleted = FALSE
        """, (user.id,))
        
        result = db.cursor.fetchone()
        if not result:
            return False

        is_verified, is_employee = result
        return bool(is_employee and is_verified)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {e}")
        return False
    
async def admin_reports_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –º–µ–Ω—é –æ—Ç—á–µ—Ç–æ–≤ –∞–¥–º–∏–Ω–∞"""
    user = update.effective_user
    if user.id not in CONFIG.admin_ids:
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞")
        return await show_main_menu(update, user.id)
    
    await update.message.reply_text(
        "üìä –í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –¥–ª—è –æ—Ç—á–µ—Ç–∞:",
        reply_markup=create_admin_reports_menu()
    )
    return ADMIN_REPORTS_MENU

async def handle_admin_reports_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –≤ –º–µ–Ω—é –æ—Ç—á–µ—Ç–æ–≤ –∞–¥–º–∏–Ω–∞"""
    user = update.effective_user
    text = update.message.text
    
    if text == "üìä –û—Ç—á–µ—Ç –∑–∞ –¥–µ–Ω—å":
        context.user_data['report_period'] = 'daily'
        await update.message.reply_text(
            "üìã –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ—Ç—á–µ—Ç–∞:",
            reply_markup=create_report_type_menu()
        )
        return SELECT_REPORT_TYPE
        
    elif text == "üìÖ –û—Ç—á–µ—Ç –∑–∞ –º–µ—Å—è—Ü":
        context.user_data['report_period'] = 'monthly'
        await update.message.reply_text(
            "üìã –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ—Ç—á–µ—Ç–∞:",
            reply_markup=create_report_type_menu()
        )
        return SELECT_REPORT_TYPE
        
    elif text == "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        return await show_main_menu(update, user.id)
        
    else:
        await update.message.reply_text("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞")
        return await admin_reports_menu(update, context)

async def handle_report_type_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –æ—Ç—á–µ—Ç–∞"""
    user = update.effective_user
    text = update.message.text
    
    if text == "üîô –ù–∞–∑–∞–¥":
        return await admin_reports_menu(update, context)
        
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–∏–ø –æ—Ç—á–µ—Ç–∞
    if text == "üí∞ –ë—É—Ö–≥–∞–ª—Ç–µ—Ä—Å–∫–∏–π":
        context.user_data['report_type'] = 'accounting'
    elif text == "üì¶ –ü–æ—Å—Ç–∞–≤—â–∏–∫–∞":
        context.user_data['report_type'] = 'provider'
    elif text == "üë®‚Äçüíº –ê–¥–º–∏–Ω—Å–∫–∏–π":
        context.user_data['report_type'] = 'admin'
    else:
        await update.message.reply_text("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –æ—Ç—á–µ—Ç–∞")
        return await handle_report_type_selection(update, context)
    
    # –î–ª—è –¥–Ω–µ–≤–Ω—ã—Ö –æ—Ç—á–µ—Ç–æ–≤ - —Å—Ä–∞–∑—É –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º
    if context.user_data['report_period'] == 'daily':
        today = datetime.now(CONFIG.timezone).date()
        
        if context.user_data['report_type'] == 'accounting':
            await export_accounting_report(update, context, today, today)
        elif context.user_data['report_type'] == 'provider':
            await export_orders_for_provider(update, context, today, today)
        elif context.user_data['report_type'] == 'admin':
            await export_daily_admin_report(update, context, today)
            
        return await show_main_menu(update, user.id)
    # –î–ª—è –º–µ—Å—è—á–Ω—ã—Ö - –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –º–µ—Å—è—Ü
    else:
        await update.message.reply_text(
            "üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Å—è—Ü:",
            reply_markup=create_month_selection_keyboard()
        )
        return SELECT_MONTH_RANGE