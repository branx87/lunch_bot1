# ##handlers/commands.py
from telegram import Update
from telegram.ext import ContextTypes, CommandHandler
from db import db

async def notifications_on(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í–∫–ª—é—á–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    db.cursor.execute(
        "UPDATE users SET notifications_enabled = TRUE WHERE telegram_id = ?",
        (update.effective_user.id,)
    )
    db.conn.commit()
    await update.message.reply_text("üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã!")

async def notifications_off(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–∫–ª—é—á–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    db.cursor.execute(
        "UPDATE users SET notifications_enabled = FALSE WHERE telegram_id = ?",
        (update.effective_user.id,)
    )
    db.conn.commit()
    await update.message.reply_text("üîï –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã!")

def setup(application):
    application.add_handler(CommandHandler("notifications_on", notifications_on))
    application.add_handler(CommandHandler("notifications_off", notifications_off))
    
async def check_sync(update: Update, context: ContextTypes.DEFAULT_TYPE):
    synced_users = db.execute('''
        SELECT u.id, u.full_name, b.bitrix_id
        FROM users u
        JOIN bitrix_mapping b ON u.id = b.local_id AND b.local_type = 'user'
    ''')
    
    if not synced_users:
        await update.message.reply_text("–ù–µ—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
        return
    
    msg = "–°–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∏:\n" + "\n".join(
        f"{u[0]}: {u[1]} ‚Üí Bitrix ID {u[2]}" for u in synced_users
    )
    await update.message.reply_text(msg)

def setup_commands(app):
    app.add_handler(CommandHandler("checksync", check_sync))