# ##handlers/cron_jobs.py
import aiocron
from db import CONFIG
from datetime import datetime, timedelta
import logging
from db import db
from telegram.ext import Application

logger = logging.getLogger(__name__)

class CronManager:
    def __init__(self, application: Application):
        self.application = application
        self.jobs = []

    async def is_workday(self, date: datetime) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –¥–µ–Ω—å —Ä–∞–±–æ—á–∏–º"""
        if date.weekday() >= 5:  # –°—É–±–±–æ—Ç–∞ –∏–ª–∏ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ
            return False
        return date.strftime("%Y-%m-%d") not in CONFIG.holidays

    async def setup(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è cron-–∑–∞–¥–∞—á –≤ –±–æ–µ–≤–æ–º —Ä–µ–∂–∏–º–µ"""
        self._add_production_jobs()
        logger.info("Cron –∑–∞–¥–∞—á–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –≤ –±–æ–µ–≤–æ–º —Ä–µ–∂–∏–º–µ")

    def _add_production_jobs(self):
        """–ë–æ–µ–≤—ã–µ –∑–∞–¥–∞—á–∏ –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é"""
        # –£—Ç—Ä–µ–Ω–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤ 9:00
        self.jobs.append(aiocron.crontab(
            '0 9 * * 1-5',
            # '* * * * * ',
            func=self._morning_reminder,
            tz=CONFIG.timezone
        ))
        
        # –£—Ç—Ä–µ–Ω–Ω–∏–µ –æ—Ç—á–µ—Ç—ã –≤ 9:31
        self.jobs.append(aiocron.crontab(
            '31 9 * * 1-5',
            func=self._morning_reports,
            tz=CONFIG.timezone
        ))
        
        # –ë—É—Ö–≥–∞–ª—Ç–µ—Ä—Å–∫–∏–π –æ—Ç—á–µ—Ç –≤ 11:00 –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –¥–Ω—è –º–µ—Å—è—Ü–∞
        self.jobs.append(aiocron.crontab(
            '0 11 28-31 * *',
            func=self._accounting_report,
            tz=CONFIG.timezone
        ))

    async def _morning_reminder(self):
        """–£—Ç—Ä–µ–Ω–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –±–µ–∑ –∑–∞–∫–∞–∑–æ–≤ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è"""
        if await self.is_workday(datetime.now(CONFIG.timezone)):
            now = datetime.now(CONFIG.timezone)
            today = now.date().isoformat()
            logger.info(f"–ó–∞–ø—É—Å–∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –≤ {now} –¥–ª—è –¥–∞—Ç—ã {today}")

            # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä–∏–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            db.cursor.execute("""
                SELECT COUNT(*) 
                FROM users 
                WHERE is_verified = TRUE 
                AND is_deleted = FALSE
                AND notifications_enabled = TRUE
                AND is_employee = TRUE
            """)
            total_users = db.cursor.fetchone()[0]
            logger.info(f"–í—Å–µ–≥–æ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}")

            # –ü—Ä–æ–≤–µ—Ä–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∑–∞–∫–∞–∑–∞–º–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
            db.cursor.execute("""
                SELECT COUNT(DISTINCT u.id)
                FROM users u
                JOIN orders o ON u.id = o.user_id
                WHERE o.target_date = ?
                AND o.is_cancelled = FALSE
                AND o.is_active = TRUE
                AND o.quantity > 0
            """, (today,))
            users_with_orders = db.cursor.fetchone()[0]
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∑–∞–∫–∞–∑–∞–º–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è: {users_with_orders}")

            # –û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è telegram_id
            db.cursor.execute("""
                SELECT u.telegram_id 
                FROM users u
                WHERE u.is_verified = TRUE 
                AND u.is_deleted = FALSE
                AND u.notifications_enabled = TRUE
                AND u.is_employee = TRUE
                AND NOT EXISTS (
                    SELECT 1 
                    FROM orders o 
                    WHERE o.user_id = u.id
                    AND o.target_date = ?
                    AND o.is_cancelled = FALSE
                    AND o.is_active = TRUE
                    AND o.quantity > 0
                )
            """, (today,))
            
            users = db.cursor.fetchall()
            logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–µ–∑ –∑–∞–∫–∞–∑–æ–≤")
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
            if len(users) == 0 and total_users > 0 and users_with_orders < total_users:
                logger.warning("""
                    –í–ù–ò–ú–ê–ù–ò–ï: –ù–∞–π–¥–µ–Ω–æ 0 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–µ–∑ –∑–∞–∫–∞–∑–æ–≤, –Ω–æ:
                    - –í—Å–µ–≥–æ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: %d
                    - –° –∑–∞–∫–∞–∑–∞–º–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è: %d
                    –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ –ë–î!
                """, total_users, users_with_orders)
                
                # –í—ã–≤–µ–¥–µ–º –ø—Ä–∏–º–µ—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
                db.cursor.execute("SELECT telegram_id, full_name FROM users LIMIT 5")
                sample_users = db.cursor.fetchall()
                logger.info(f"–ü—Ä–∏–º–µ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {sample_users}")
                
                db.cursor.execute("SELECT user_id, target_date FROM orders WHERE target_date = ? LIMIT 5", (today,))
                sample_orders = db.cursor.fetchall()
                logger.info(f"–ü—Ä–∏–º–µ—Ä –∑–∞–∫–∞–∑–æ–≤ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è: {sample_orders}")

            for user in users:
                user_id = user[0]
                try:
                    await self.application.bot.send_message(
                        chat_id=user_id,
                        text=(
                            "‚è∞ <b>–ù–µ –∑–∞–±—É–¥—å—Ç–µ –∑–∞–∫–∞–∑–∞—Ç—å –æ–±–µ–¥!</b> üçΩ\n\n"
                            "–ü—Ä–∏–µ–º –∑–∞–∫–∞–∑–æ–≤ –æ—Ç–∫—Ä—ã—Ç –¥–æ 9:30.\n\n"
                            "–ß—Ç–æ–±—ã –æ—Ç–∫–ª—é—á–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ—Ç–ø—Ä–∞–≤—å—Ç–µ: /notifications_off"
                        ),
                        parse_mode="HTML"
                    )
                    logger.debug(f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")

    async def _morning_reports(self):
        """–£—Ç—Ä–µ–Ω–Ω–∏–µ –æ—Ç—á–µ—Ç—ã"""
        from scheduled_reports import send_scheduled_reports
        if await self.is_workday(datetime.now(CONFIG.timezone)):
            await send_scheduled_reports(self.application, ['admins', 'providers'])

    async def _accounting_report(self):
        """–ë—É—Ö–≥–∞–ª—Ç–µ—Ä—Å–∫–∏–π –æ—Ç—á–µ—Ç"""
        from scheduled_reports import send_scheduled_reports
        now = datetime.now(CONFIG.timezone)
        if (now.month != (now + timedelta(days=1)).month and 
           await self.is_workday(now)):
            await send_scheduled_reports(self.application, ['accounting'])