# ##handlers/cron_jobs.py
import aiocron
from config import CONFIG, HOLIDAYS, TIMEZONE
from datetime import datetime, timedelta
import logging
from db import db
from telegram.ext import Application

logger = logging.getLogger(__name__)

class CronManager:
    def __init__(self, application: Application):
        self.application = application
        self.jobs = []

    async def is_workday(self, date: datetime) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –¥–µ–Ω—å —Ä–∞–±–æ—á–∏–º"""
        if date.weekday() >= 5:  # –°—É–±–±–æ—Ç–∞ –∏–ª–∏ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ
            return False
        return date.strftime("%Y-%m-%d") not in HOLIDAYS

    async def setup(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è cron-–∑–∞–¥–∞—á –≤ –±–æ–µ–≤–æ–º —Ä–µ–∂–∏–º–µ"""
        self._add_production_jobs()
        logger.info("Cron –∑–∞–¥–∞—á–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –≤ –±–æ–µ–≤–æ–º —Ä–µ–∂–∏–º–µ")

    def _add_production_jobs(self):
        """–ë–æ–µ–≤—ã–µ –∑–∞–¥–∞—á–∏ –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é"""
        # –£—Ç—Ä–µ–Ω–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤ 9:00
        self.jobs.append(aiocron.crontab(
            '0 9 * * 1-5',
            func=self._morning_reminder,
            tz=TIMEZONE
        ))
        
        # –£—Ç—Ä–µ–Ω–Ω–∏–µ –æ—Ç—á–µ—Ç—ã –≤ 9:30
        self.jobs.append(aiocron.crontab(
            '30 9 * * 1-5',
            func=self._morning_reports,
            tz=TIMEZONE
        ))
        
        # –ë—É—Ö–≥–∞–ª—Ç–µ—Ä—Å–∫–∏–π –æ—Ç—á–µ—Ç –≤ 11:00 –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –¥–Ω—è –º–µ—Å—è—Ü–∞
        self.jobs.append(aiocron.crontab(
            '0 11 28-31 * *',
            func=self._accounting_report,
            tz=TIMEZONE
        ))

    async def _morning_reminder(self):
        """–í–∞—à –∫–æ–¥ —É—Ç—Ä–µ–Ω–Ω–∏—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π"""
        if await self.is_workday(datetime.now(TIMEZONE)):
            now = datetime.now(TIMEZONE)
            logger.info(f"–ó–∞–ø—É—Å–∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –≤ {now}")
            
            db.cursor.execute("""
                SELECT telegram_id 
                FROM users 
                WHERE is_verified = TRUE 
                AND telegram_id NOT IN (
                    SELECT u.telegram_id 
                    FROM users u 
                    JOIN orders o ON u.id = o.user_id 
                    WHERE o.target_date = ? AND o.is_preliminary = FALSE AND o.is_cancelled = FALSE
                )
            """, (now.date().isoformat(),))
            
            users = db.cursor.fetchall()
            logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–µ–∑ –∑–∞–∫–∞–∑–æ–≤")
            
            for user in users:
                user_id = user[0]
                try:
                    await self.application.bot.send_message(
                        chat_id=user_id,
                        text="‚è∞ *–ù–µ –∑–∞–±—É–¥—å—Ç–µ –∑–∞–∫–∞–∑–∞—Ç—å –æ–±–µ–¥!* üçΩ\n\n"
                             "–ü—Ä–∏–µ–º –∑–∞–∫–∞–∑–æ–≤ –æ—Ç–∫—Ä—ã—Ç –¥–æ 9:30.\n\n",
                        parse_mode="Markdown"
                    )
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")

    async def _morning_reports(self):
        """–£—Ç—Ä–µ–Ω–Ω–∏–µ –æ—Ç—á–µ—Ç—ã"""
        from scheduled_reports import send_scheduled_reports
        if await self.is_workday(datetime.now(TIMEZONE)):
            await send_scheduled_reports(self.application, ['admins', 'providers'])

    async def _accounting_report(self):
        """–ë—É—Ö–≥–∞–ª—Ç–µ—Ä—Å–∫–∏–π –æ—Ç—á–µ—Ç"""
        from scheduled_reports import send_scheduled_reports
        now = datetime.now(TIMEZONE)
        if (now.month != (now + timedelta(days=1)).month and 
           await self.is_workday(now)):
            await send_scheduled_reports(self.application, ['accounting'])