# ##bot_keyboards.py
from typing import Optional, List
from telegram import (
    ReplyKeyboardMarkup, 
    KeyboardButton, 
    InlineKeyboardButton, 
    InlineKeyboardMarkup
)
from config import CONFIG
import logging

logger = logging.getLogger(__name__)

def create_unverified_user_keyboard() -> ReplyKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –Ω–µ–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    return ReplyKeyboardMarkup([
        ["–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞"],
        ["–ù–∞–ø–∏—Å–∞—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É"]
    ], resize_keyboard=True)

def create_main_menu_keyboard(user_id: Optional[int] = None, db_connection = None) -> ReplyKeyboardMarkup:
    """
    –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å —Ä–∞–∑–Ω—ã–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ä–æ–ª–µ–π
    Args:
        user_id: Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        db_connection: –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ë–î (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–æ–ª—å)
    """
    menu = []

    if not user_id:
        # –ë–∞–∑–æ–≤–æ–µ –º–µ–Ω—é –¥–ª—è –Ω–µ–∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö
        return ReplyKeyboardMarkup([
            ["–ú–µ–Ω—é –Ω–∞ —Å–µ–≥–æ–¥–Ω—è", "–ú–µ–Ω—é –Ω–∞ –Ω–µ–¥–µ–ª—é"],
            ["–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–∫–∞–∑—ã", "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –º–µ—Å—è—Ü"],
            ["–ù–∞–ø–∏—Å–∞—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É"]
        ], resize_keyboard=True)

    role = get_user_role(user_id, db_connection) if db_connection else None

    if role == 'employee':
        menu.extend([
            ["–ú–µ–Ω—é –Ω–∞ —Å–µ–≥–æ–¥–Ω—è", "–ú–µ–Ω—é –Ω–∞ –Ω–µ–¥–µ–ª—é"],
            ["–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–∫–∞–∑—ã", "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –º–µ—Å—è—Ü"],
            ["–ù–∞–ø–∏—Å–∞—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É"]
        ])

    elif role == 'provider':
        menu.extend([
            ["–ú–µ–Ω—é –Ω–∞ —Å–µ–≥–æ–¥–Ω—è", "–ú–µ–Ω—é –Ω–∞ –Ω–µ–¥–µ–ª—é"],
            ["‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –º–µ–Ω—é", "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –º–µ—Å—è—Ü"],
            ["üìä –û—Ç—á–µ—Ç –∑–∞ –¥–µ–Ω—å", "üìÖ –û—Ç—á–µ—Ç –∑–∞ –º–µ—Å—è—Ü"],
            ["–ù–∞–ø–∏—Å–∞—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É"]
        ])

    elif role == 'accountant':
        menu.extend([
            ["–ú–µ–Ω—é –Ω–∞ —Å–µ–≥–æ–¥–Ω—è", "–ú–µ–Ω—é –Ω–∞ –Ω–µ–¥–µ–ª—é"],
            ["üìä –û—Ç—á–µ—Ç –∑–∞ –¥–µ–Ω—å", "üìÖ –û—Ç—á–µ—Ç –∑–∞ –º–µ—Å—è—Ü"],
            ["–ù–∞–ø–∏—Å–∞—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É"]
        ])

    elif role == 'admin':
        reports_menu = []
        if hasattr(CONFIG, 'admin_ids') and user_id in CONFIG.admin_ids:
            reports_menu.append("üìä –û—Ç—á–µ—Ç –∑–∞ –¥–µ–Ω—å")
        reports_menu.append("üìÖ –û—Ç—á–µ—Ç –∑–∞ –º–µ—Å—è—Ü")
        menu.insert(0, reports_menu)

        admin_menu = [
            "‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π",
            "üì¢ –°–¥–µ–ª–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É",
            "‚úâÔ∏è –ù–∞–ø–∏—Å–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"
        ]
        menu.append(admin_menu)

        menu.extend([
            ["–ú–µ–Ω—é –Ω–∞ —Å–µ–≥–æ–¥–Ω—è", "–ú–µ–Ω—é –Ω–∞ –Ω–µ–¥–µ–ª—é"],
            ["–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–∫–∞–∑—ã", "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –º–µ—Å—è—Ü"],
            ["–û–±–Ω–æ–≤–∏—Ç—å –º–µ–Ω—é", "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]
        ])

    else:
        menu.extend([
            ["–ú–µ–Ω—é –Ω–∞ —Å–µ–≥–æ–¥–Ω—è", "–ú–µ–Ω—é –Ω–∞ –Ω–µ–¥–µ–ª—é"],
            ["–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–∫–∞–∑—ã", "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –º–µ—Å—è—Ü"],
            ["–ù–∞–ø–∏—Å–∞—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É"],
            ["üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]
        ])

    return ReplyKeyboardMarkup(menu, resize_keyboard=True)

def create_month_selection_keyboard() -> ReplyKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ –º–µ—Å—è—Ü–∞ –¥–ª—è –æ—Ç—á–µ—Ç–æ–≤"""
    return ReplyKeyboardMarkup([
        ["–¢–µ–∫—É—â–∏–π –º–µ—Å—è—Ü"],
        ["–ü—Ä–æ—à–ª—ã–π –º–µ—Å—è—Ü"],
        ["–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]
    ], resize_keyboard=True)

def create_order_keyboard(has_order: bool) -> List[List[InlineKeyboardButton]]:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–µ–π—Å—Ç–≤–∏–π —Å –∑–∞–∫–∞–∑–æ–º"""
    if has_order:
        return [
            [InlineKeyboardButton("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ", callback_data="change")],
            [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑", callback_data="cancel")]
        ]
    return [[InlineKeyboardButton("‚úÖ –ó–∞–∫–∞–∑–∞—Ç—å", callback_data="order")]]

def create_admin_keyboard() -> ReplyKeyboardMarkup:
    """–û—Å–Ω–æ–≤–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –∞–¥–º–∏–Ω–∞"""
    return ReplyKeyboardMarkup([
        ["‚úâÔ∏è –ù–∞–ø–∏—Å–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é", "üì¢ –°–¥–µ–ª–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É"],
        ["‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π", "üìú –ò—Å—Ç–æ—Ä–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π"],
        ["üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]
    ], resize_keyboard=True)

def create_admin_config_keyboard() -> ReplyKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π"""
    return ReplyKeyboardMarkup([
        ["‚ûï –î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", "‚ûñ –£–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"],
        ["‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞", "‚ûñ –£–¥–∞–ª–∏—Ç—å –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞"],
        ["‚ûï –î–æ–±–∞–≤–∏—Ç—å –±—É—Ö–≥–∞–ª—Ç–µ—Ä–∞", "‚ûñ –£–¥–∞–ª–∏—Ç—å –±—É—Ö–≥–∞–ª—Ç–µ—Ä–∞"],
        ["‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞", "‚ûñ –£–¥–∞–ª–∏—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞"],
        ["‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–∞–∑–¥–Ω–∏–∫", "‚ûñ –£–¥–∞–ª–∏—Ç—å –ø—Ä–∞–∑–¥–Ω–∏–∫"],
        ["üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]
    ], resize_keyboard=True)

def create_provider_menu_keyboard() -> ReplyKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞"""
    return ReplyKeyboardMarkup([
        ["‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –º–µ–Ω—é"],
        ["üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]
    ], resize_keyboard=True)

def get_cancel_button() -> InlineKeyboardMarkup:
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –∫–Ω–æ–ø–∫–∞ '–û—Ç–º–µ–Ω–∞'"""
    return InlineKeyboardMarkup([[
        InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_delete")
    ]])

def get_user_role(user_id: int, db_connection) -> Optional[str]:
    """
    –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –µ–≥–æ Telegram ID.
    Args:
        user_id: Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        db_connection: –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ë–î
    Returns:
        –û–¥–Ω–æ –∏–∑: 'admin', 'provider', 'accountant', 'employee' –∏–ª–∏ None
    """
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–æ–ª–∏ –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
        if user_id in CONFIG.admin_ids:
            logger.debug(f"User {user_id} identified as admin")
            return 'admin'
        if user_id in CONFIG.provider_ids:
            logger.debug(f"User {user_id} identified as provider")
            return 'provider'
        if user_id in CONFIG.accounting_ids:
            logger.debug(f"User {user_id} identified as accountant")
            return 'accountant'

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–º
        if db_connection:
            db_connection.cursor.execute(
                "SELECT id FROM users WHERE telegram_id = ? AND is_employee = TRUE AND is_deleted = FALSE",
                (user_id,)  # –í–∞–∂–Ω–æ: –ø–µ—Ä–µ–¥–∞–µ–º –∫–∞–∫ –∫–æ—Ä—Ç–µ–∂
            )
            result = db_connection.cursor.fetchone()
            
            if result:
                logger.debug(f"User {user_id} identified as employee")
                return 'employee'
        
        logger.debug(f"User {user_id} has no recognized role")
        return None

    except Exception as e:
        logger.error(f"Error determining role for user {user_id}: {e}")
        return None
    
def create_history_keyboard(current_page: int = 0, has_next: bool = True) -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –∏—Å—Ç–æ—Ä–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
    Args:
        current_page: –¢–µ–∫—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
        has_next: –ï—Å—Ç—å –ª–∏ —Å–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
    Returns:
        InlineKeyboardMarkup —Å –∫–Ω–æ–ø–∫–∞–º–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    """
    buttons = []
    if current_page > 0:
        buttons.append(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"history_prev_{current_page}"))
    if has_next:
        buttons.append(InlineKeyboardButton("–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è", callback_data=f"history_next_{current_page}"))
    
    return InlineKeyboardMarkup([buttons])